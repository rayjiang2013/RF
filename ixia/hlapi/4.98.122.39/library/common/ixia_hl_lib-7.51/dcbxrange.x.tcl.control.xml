<?xml version="1.0" encoding="utf-8"?>
<method name="dcbxrange_control" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixNetworkTclApiSupport="true" ixNetworkTclScriptgenSupport="true" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfTclApiSupport="false" ixNetworkCpfTclScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixNetworkPerlApiSupport="true" ixNetworkPerlScriptgenSupport="true" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixNetworkCpfPerlApiSupport="false" ixNetworkCpfPerlScriptgenSupport="false" displayPriority="0">
  <description supportType="ixHalOrProtocolSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixLoadSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixNetworkCpfSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixNetworkSupport" contentType="new" target="noTarget">Perform control plane operations on an endpoint created by a ::&lt;namespace&gt;::dcbxrange_config command</description>
  <chapter>DCBX/LLDP APIs</chapter>
  <arguments>
    <argument name="handle" definedBy="ixiaDefined" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixNetworkTclApiSupport="true" ixNetworkTclScriptgenSupport="true" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfTclApiSupport="false" ixNetworkCpfTclScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixNetworkPerlApiSupport="true" ixNetworkPerlScriptgenSupport="true" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixNetworkCpfPerlApiSupport="false" ixNetworkCpfPerlScriptgenSupport="false">
      <ixNetworkSupport contentType="new" target="noTarget" mandatory="true">
        <description>
          <text textType="htmlText">
            <pre>A handle returned via a ::&lt;namespace&gt;::dcbxrange_config command. This is the object on which the action will take place.</pre>
          </text>
        </description>
        <restriction type="VALUETYPE" valueType="ANY" />
      </ixNetworkSupport>
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" />
      <ixNetworkCpfSupport contentType="noContent" target="noTarget" />
      <ixLoadSupport contentType="noContent" target="noTarget" />
    </argument>
    <argument name="action" definedBy="ixiaDefined" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixNetworkTclApiSupport="true" ixNetworkTclScriptgenSupport="true" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfTclApiSupport="false" ixNetworkCpfTclScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixNetworkPerlApiSupport="true" ixNetworkPerlScriptgenSupport="true" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixNetworkCpfPerlApiSupport="false" ixNetworkCpfPerlScriptgenSupport="false">
      <ixNetworkSupport contentType="new" target="noTarget" mandatory="true">
        <description>
          <text textType="htmlText">
            <pre>Action to be executed.</pre>
          </text>
          <choices>
            <choice>
              <choiceName>abort</choiceName>
              <choiceText>abort all sessions on the same port with the target endpoint designated by -handle. The control is returned when the operation is completed.</choiceText>
            </choice>
            <choice>
              <choiceName>abort_async</choiceName>
              <choiceText>abort all sessions on the same port with the target endpoint designated by -handle. The control is returned immediately. The operation is executed in the background.</choiceText>
            </choice>
            <choice>
              <choiceName>start</choiceName>
              <choiceText>start and/or negotiate session for the target endpoint designated by -handle.</choiceText>
            </choice>
            <choice>
              <choiceName>connect</choiceName>
              <choiceText>start and/or negotiate session for the target endpoint designated by -handle.</choiceText>
            </choice>
            <choice>
              <choiceName>stop</choiceName>
              <choiceText>stop and/or release session for the target endpoint designated by -handle.</choiceText>
            </choice>
            <choice>
              <choiceName>disconnect</choiceName>
              <choiceText>stop and/or release session for the target endpoint designated by -handle.</choiceText>
            </choice>
          </choices>
        </description>
        <restriction type="VALUETYPE" valueType="CHOICES" value="abort abort_async start connect stop disconnect" />
      </ixNetworkSupport>
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" />
      <ixNetworkCpfSupport contentType="noContent" target="noTarget" />
      <ixLoadSupport contentType="noContent" target="noTarget" />
    </argument>
  </arguments>
  <returnValues>
    <returnValue>
      <key>status</key>
      <value>$::SUCCESS | $::FAILURE</value>
      <tag value="" />
    </returnValue>
    <returnValue>
      <key>log</key>
      <value>Error message if command returns {status 0}</value>
      <tag value="" />
    </returnValue>
    <returnValue>
      <key>inner_results</key>
      <value>The result(s) of the  control action.</value>
      <tag value="" />
    </returnValue>
  </returnValues>
  <examples>
    <example>See files in the Samples subdirectory</example>
  </examples>
  <sampleInput />
  <sampleOutput />
  <notes />
  <seeAlso>
    <seeAlsoElem supportType="all">This command applies only to IxNetwork</seeAlsoElem>
    <seeAlsoElem supportType="all">External documentation on Tclx keyed lists</seeAlsoElem>
  </seeAlso>
</method>
