<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="HL_API_Help.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Appendix|IxNetwork (only) Examples|TCL_Samples">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" /><title>BGP (IxNetwork_BGP4_neighbors_external_traffic.tcl)</title>
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../HL_API_Help.htm#HLTAPI/HLTAPI Examples/IxNetwork (only) Examples/VXLAN_DHCPv4_client_server_stats.htm">Open topic with navigation</a>
        </p>
        <h3>Configuring Two VXLAN Stacks with DHCPv4 Client and DHCPv4 Server (VXLAN_DHCPv4_client_server_stats.tcl)</h3>
        <p class="CodeBlock">################################################################################</p>
        <p class="CodeBlock">#</p>
        <p class="CodeBlock"># Description: #</p>
        <p class="CodeBlock"># The script configures 2 VXLAN stacks and the chained device groups #</p>
        <p class="CodeBlock"># with DHCPv4 Client and DHCPv4 Server. Start protocols and get stats. #</p>
        <p class="CodeBlock">#</p>
        <p class="CodeBlock"># Module: #</p>
        <p class="CodeBlock"># The sample was tested on a FlexAP10G16S module. #</p>
        <p class="CodeBlock">#</p>
        <p class="CodeBlock">################################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set port1 						8/4</p>
        <p class="CodeBlock">set port2 						8/6</p>
        <p class="CodeBlock">set test_name                   [info script] </p>
        <p class="CodeBlock">set ixnetwork_tcl_server        localhost </p>
        <p class="CodeBlock">set port_list                   [list $port1 $port2]</p>
        <p class="CodeBlock">set chassis_ip                  10.205.15.62</p>
        <p class="CodeBlock">set ixnetwork_tcl_server        localhost</p>
        <p class="CodeBlock">set port_list                   [list $port1 $port2]</p>
        <p class="CodeBlock">set username                    tbadea</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set PASSED 0</p>
        <p class="CodeBlock">set FAILED 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[catch {package require Ixia} retCode]} {</p>
        <p class="CodeBlock">puts "FAIL - $retCode"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set connect_status [::ixiangpf::connect \</p>
        <p class="CodeBlock">-reset                  1 \</p>
        <p class="CodeBlock">-device                 $chassis_ip \</p>
        <p class="CodeBlock">-username               $username \</p>
        <p class="CodeBlock">-port_list              $port_list \</p>
        <p class="CodeBlock">-ixnetwork_tcl_server   $ixnetwork_tcl_server \</p>
        <p class="CodeBlock">-tcl_server             $chassis_ip \</p>
        <p class="CodeBlock">-break_locks            1 \</p>
        <p class="CodeBlock">-connect_timeout        180 \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">if {[keylget connect_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget connect_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set port_handle [list]</p>
        <p class="CodeBlock">foreach port $port_list {</p>
        <p class="CodeBlock">if {![catch {keylget connect_status port_handle.$chassis_ip.$port} \</p>
        <p class="CodeBlock">temp_port]} {</p>
        <p class="CodeBlock">lappend port_handle $temp_port</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set i 0</p>
        <p class="CodeBlock">puts "Ixia port handles are:"</p>
        <p class="CodeBlock">foreach port $port_handle {</p>
        <p class="CodeBlock">set port_$i $port</p>
        <p class="CodeBlock">puts $port</p>
        <p class="CodeBlock">set interface_handles_$port ""</p>
        <p class="CodeBlock">incr i</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">proc show_stats var {</p>
        <p class="CodeBlock">set level [expr [info level] - 1]</p>
        <p class="CodeBlock">foreach key [keylkeys var] {</p>
        <p class="CodeBlock">if {$key == "status"} {continue}</p>
        <p class="CodeBlock">set indent [string repeat "    " $level]</p>
        <p class="CodeBlock">puts -nonewline $indent</p>
        <p class="CodeBlock">if {[catch {keylkeys var $key}]} {</p>
        <p class="CodeBlock">puts "$key: [keylget var $key]"</p>
        <p class="CodeBlock">continue</p>
        <p class="CodeBlock">} else {</p>
        <p class="CodeBlock">puts $key</p>
        <p class="CodeBlock">puts "$indent[string repeat "-" [string length $key]]"</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">show_stats [keylget var $key]</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								VTEP 1 CONFIG</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE TOPOLOGY 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_1_status [::ixiangpf::topology_config					\</p>
        <p class="CodeBlock">-topology_name      {Topology 1}                            \</p>
        <p class="CodeBlock">-port_handle        $port_0								    \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget topology_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget topology_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_1_handle [keylget topology_1_status topology_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE DEVICE GROUP 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_group_1_status [::ixiangpf::topology_config      \</p>
        <p class="CodeBlock">-topology_handle              $topology_1_handle        \</p>
        <p class="CodeBlock">-device_group_multiplier      3                         \</p>
        <p class="CodeBlock">-device_group_enabled         1                         \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget device_group_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget device_group_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_1_handle	[keylget device_group_1_status device_group_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE ETHERNET STACK FOR VXLAN 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_1_status [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          00.11.01.00.00.01       \</p>
        <p class="CodeBlock">-counter_step           00.00.00.00.00.01       \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              00.00.01.00.00.00       \</p>
        <p class="CodeBlock">-nest_owner             $topology_1_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_1_handle [keylget multivalue_1_status multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_1_status [::ixiangpf::interface_config \</p>
        <p class="CodeBlock">-protocol_name                {Ethernet 1}               \</p>
        <p class="CodeBlock">-protocol_handle              $device_1_handle           \</p>
        <p class="CodeBlock">-mtu                          1500                       \</p>
        <p class="CodeBlock">-src_mac_addr                 $multivalue_1_handle       \</p>
        <p class="CodeBlock">-vlan                         1                          \</p>
        <p class="CodeBlock">-vlan_id                      101                        \</p>
        <p class="CodeBlock">-vlan_id_step                 1                          \</p>
        <p class="CodeBlock">-vlan_id_count                1                          \</p>
        <p class="CodeBlock">-vlan_tpid                    0x8100                     \</p>
        <p class="CodeBlock">-vlan_user_priority           0                          \</p>
        <p class="CodeBlock">-vlan_user_priority_step      0                          \</p>
        <p class="CodeBlock">-use_vpn_parameters           0                          \</p>
        <p class="CodeBlock">-site_id                      0                          \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget ethernet_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $ethernet_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_1_handle [keylget ethernet_1_status ethernet_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_status [::ixiangpf::emulation_vxlan_config                          	\</p>
        <p class="CodeBlock">-mode							create									\</p>
        <p class="CodeBlock">-handle						$ethernet_1_handle						\</p>
        <p class="CodeBlock">-intf_ip_addr					23.0.0.1							\</p>
        <p class="CodeBlock">-intf_ip_addr_step				0.0.0.1						\</p>
        <p class="CodeBlock">-ip_num_sessions               2                        \</p>
        <p class="CodeBlock">-intf_ip_prefix_length			24					\</p>
        <p class="CodeBlock">-gateway						23.0.0.100								\</p>
        <p class="CodeBlock">-gateway_step					0.0.0.1							\</p>
        <p class="CodeBlock">-enable_resolve_gateway		1					\</p>
        <p class="CodeBlock">-vni							600									\</p>
        <p class="CodeBlock">-create_ig						0								\</p>
        <p class="CodeBlock">-ipv4_multicast				225.3.0.9							\</p>
        <p class="CodeBlock">-sessions_per_vxlan			1		\</p>
        <p class="CodeBlock">-ip_to_vxlan_multiplier					1								\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 					    VTEP 1 CREATE ON THE SAME DG</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_1_status [::ixiangpf::emulation_vxlan_config                          	\</p>
        <p class="CodeBlock">-mode							create									\</p>
        <p class="CodeBlock">-handle						$device_1_handle						\</p>
        <p class="CodeBlock">-intf_ip_addr					40.0.0.1							\</p>
        <p class="CodeBlock">-intf_ip_addr_step				0.0.0.1						\</p>
        <p class="CodeBlock">-gateway						40.0.0.100								\</p>
        <p class="CodeBlock">-gateway_step					0.0.0.1							\</p>
        <p class="CodeBlock">-enable_resolve_gateway		1					\</p>
        <p class="CodeBlock">-vni							640									\</p>
        <p class="CodeBlock">-create_ig						0								\</p>
        <p class="CodeBlock">-ipv4_multicast				225.3.0.40							\</p>
        <p class="CodeBlock">-sessions_per_vxlan			1		\</p>
        <p class="CodeBlock">-ip_to_vxlan_multiplier					1								\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_1_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_1_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_1_handle [lindex [keylget vxlan_1_1_status vxlan_handle] 0]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 					    	  DELETE 2nd VTEP</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_delete_status [::ixiangpf::emulation_vxlan_config                          	\</p>
        <p class="CodeBlock">-mode							delete									\</p>
        <p class="CodeBlock">-handle						$vxlan_1_1_handle				\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_1_delete_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_1_delete_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[ixNet getList [keylget vxlan_1_1_status ipv4_handle] vxlan]!=""} {</p>
        <p class="CodeBlock">puts "FAIL - VXLAN stack not deleted!"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 					    	  DESTROY TOPOLOGY 1</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set destroy_status [::ixiangpf::topology_config      \</p>
        <p class="CodeBlock">-topology_handle              $topology_1_handle        \</p>
        <p class="CodeBlock">-mode 						  destroy 				\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget device_group_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget device_group_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								VTEP 1 CONFIG</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE TOPOLOGY 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_1_status [::ixiangpf::topology_config					\</p>
        <p class="CodeBlock">-topology_name      {Topology 1}                            \</p>
        <p class="CodeBlock">-port_handle        $port_0								    \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget topology_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget topology_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_1_handle [keylget topology_1_status topology_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE DEVICE GROUP 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_group_1_status [::ixiangpf::topology_config      \</p>
        <p class="CodeBlock">-topology_handle              $topology_1_handle        \</p>
        <p class="CodeBlock">-device_group_name            {VTEP 1}                      \</p>
        <p class="CodeBlock">-device_group_multiplier      3                         \</p>
        <p class="CodeBlock">-device_group_enabled         1                         \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget device_group_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget device_group_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_1_handle	[keylget device_group_1_status device_group_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE ETHERNET STACK FOR VXLAN 1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_1_status [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          00.11.01.00.00.01       \</p>
        <p class="CodeBlock">-counter_step           00.00.00.00.00.01       \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              00.00.01.00.00.00       \</p>
        <p class="CodeBlock">-nest_owner             $topology_1_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_1_handle [keylget multivalue_1_status multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_1_status [::ixiangpf::interface_config \</p>
        <p class="CodeBlock">-protocol_name                {Ethernet 1}               \</p>
        <p class="CodeBlock">-protocol_handle              $device_1_handle           \</p>
        <p class="CodeBlock">-mtu                          1500                       \</p>
        <p class="CodeBlock">-src_mac_addr                 $multivalue_1_handle       \</p>
        <p class="CodeBlock">-vlan                         1                          \</p>
        <p class="CodeBlock">-vlan_id                      101                        \</p>
        <p class="CodeBlock">-vlan_id_step                 1                          \</p>
        <p class="CodeBlock">-vlan_id_count                1                          \</p>
        <p class="CodeBlock">-vlan_tpid                    0x8100                     \</p>
        <p class="CodeBlock">-vlan_user_priority           0                          \</p>
        <p class="CodeBlock">-vlan_user_priority_step      0                          \</p>
        <p class="CodeBlock">-use_vpn_parameters           0                          \</p>
        <p class="CodeBlock">-site_id                      0                          \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget ethernet_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $ethernet_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_1_handle [keylget ethernet_1_status ethernet_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_status [::ixiangpf::emulation_vxlan_config                          	\</p>
        <p class="CodeBlock">-mode							create									\</p>
        <p class="CodeBlock">-handle						$ethernet_1_handle						\</p>
        <p class="CodeBlock">-intf_ip_addr					23.0.0.1							\</p>
        <p class="CodeBlock">-intf_ip_addr_step				0.0.0.1						\</p>
        <p class="CodeBlock">-ip_num_sessions               2                        \</p>
        <p class="CodeBlock">-intf_ip_prefix_length			24					\</p>
        <p class="CodeBlock">-gateway						23.0.0.100								\</p>
        <p class="CodeBlock">-gateway_step					0.0.0.1							\</p>
        <p class="CodeBlock">-enable_resolve_gateway		1					\</p>
        <p class="CodeBlock">-vni							600									\</p>
        <p class="CodeBlock">-create_ig						0								\</p>
        <p class="CodeBlock">-ipv4_multicast				225.3.0.9							\</p>
        <p class="CodeBlock">-sessions_per_vxlan			1		\</p>
        <p class="CodeBlock">-ip_to_vxlan_multiplier					1								\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_1_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_handle [lindex [keylget vxlan_1_status vxlan_handle] 0]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								VTEP 2 CONFIG</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE TOPOLOGY 2</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_2_status [::ixiangpf::topology_config					\</p>
        <p class="CodeBlock">-topology_name      {Topology 2}                            \</p>
        <p class="CodeBlock">-port_handle        $port_1								    \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">if {[keylget topology_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget topology_2_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set topology_2_handle [keylget topology_2_status topology_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE DEVICE GROUP 2</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_group_2_status [::ixiangpf::topology_config      \</p>
        <p class="CodeBlock">-topology_handle              $topology_2_handle        \</p>
        <p class="CodeBlock">-device_group_name            {VTEP 2}                      \</p>
        <p class="CodeBlock">-device_group_multiplier      3                         \</p>
        <p class="CodeBlock">-device_group_enabled         1                         \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget device_group_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget device_group_2_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_2_handle	[keylget device_group_2_status device_group_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE ETHERNET STACK FOR VXLAN 2</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_2_status [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          00.24.01.00.00.01       \</p>
        <p class="CodeBlock">-counter_step           00.00.00.00.00.01       \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              00.00.01.00.00.00       \</p>
        <p class="CodeBlock">-nest_owner             $topology_2_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_2_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_2_handle [keylget multivalue_2_status multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_2_status [::ixiangpf::interface_config \</p>
        <p class="CodeBlock">-protocol_name                {Ethernet 2}               \</p>
        <p class="CodeBlock">-protocol_handle              $device_2_handle           \</p>
        <p class="CodeBlock">-mtu                          1500                       \</p>
        <p class="CodeBlock">-src_mac_addr                 $multivalue_2_handle       \</p>
        <p class="CodeBlock">-vlan                         1                          \</p>
        <p class="CodeBlock">-vlan_id                      101                        \</p>
        <p class="CodeBlock">-vlan_id_step                 1                          \</p>
        <p class="CodeBlock">-vlan_id_count                1                          \</p>
        <p class="CodeBlock">-vlan_tpid                    0x8100                     \</p>
        <p class="CodeBlock">-vlan_user_priority           0                          \</p>
        <p class="CodeBlock">-vlan_user_priority_step      0                          \</p>
        <p class="CodeBlock">-use_vpn_parameters           0                          \</p>
        <p class="CodeBlock">-site_id                      0                          \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget ethernet_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $ethernet_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ethernet_2_handle [keylget ethernet_2_status ethernet_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CREATE IPv4 STACK FOR VXLAN 2</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_2_status [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          23.0.0.100              \</p>
        <p class="CodeBlock">-counter_step           0.0.0.1                 \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              0.1.0.0                 \</p>
        <p class="CodeBlock">-nest_owner             $topology_1_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_2_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_2_handle [keylget multivalue_2_status multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set gw_multivalue_1_status [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          23.0.0.1              \</p>
        <p class="CodeBlock">-counter_step           0.0.0.1                 \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              0.1.0.0                 \</p>
        <p class="CodeBlock">-nest_owner             $topology_1_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget gw_multivalue_1_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $gw_multivalue_1_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set gw_multivalue_1_handle [keylget gw_multivalue_1_status multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ipv4_2_status [::ixiangpf::interface_config \</p>
        <p class="CodeBlock">-protocol_name                {IPv4 2}                  \</p>
        <p class="CodeBlock">-protocol_handle              $ethernet_2_handle        \</p>
        <p class="CodeBlock">-ipv4_resolve_gateway         1                         \</p>
        <p class="CodeBlock">-gateway                      $gw_multivalue_1_handle   \</p>
        <p class="CodeBlock">-intf_ip_addr                 $multivalue_2_handle      \</p>
        <p class="CodeBlock">-netmask                      255.255.255.0             \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget ipv4_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $ipv4_2_status"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set ipv4_2_handle [keylget ipv4_2_status ipv4_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_2_status [::ixiangpf::emulation_vxlan_config                         	\</p>
        <p class="CodeBlock">-mode									create							\</p>
        <p class="CodeBlock">-handle								$ipv4_2_handle					\</p>
        <p class="CodeBlock">-intf_ip_prefix_length					24								\</p>
        <p class="CodeBlock">-vni									600								\</p>
        <p class="CodeBlock">-create_ig								1								\</p>
        <p class="CodeBlock">-ipv4_multicast						225.3.0.9						\</p>
        <p class="CodeBlock">-ip_to_vxlan_multiplier				1								\</p>
        <p class="CodeBlock">-ig_intf_ip_addr			            80.0.0.100			            \</p>
        <p class="CodeBlock">-ig_intf_ip_addr_step		            1.0.0.0			                \</p>
        <p class="CodeBlock">-ig_intf_ip_prefix_length				16								\</p>
        <p class="CodeBlock">-ig_mac_address_init					00:67:22:33:00:00				\</p>
        <p class="CodeBlock">-ig_mac_address_step					00:00:00:00:00:11				\</p>
        <p class="CodeBlock">-ig_gateway							80.0.0.101						\</p>
        <p class="CodeBlock">-ig_gateway_step						1.0.0.0							\</p>
        <p class="CodeBlock">-ig_enable_resolve_gateway				0								\</p>
        <p class="CodeBlock">-sessions_per_vxlan					1								\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_2_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_2_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set inner_ipv4_2_handle [keylget vxlan_2_status ig_ipv4_handle]</p>
        <p class="CodeBlock">set vxlan_2_handle [lindex [keylget vxlan_2_status vxlan_handle] 0]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								 DHCPv4 SERVER</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_pool [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start          80.0.0.1		       \</p>
        <p class="CodeBlock">-counter_step           1.0.0.0			       \</p>
        <p class="CodeBlock">-counter_direction      increment               \</p>
        <p class="CodeBlock">-nest_step              1.0.0.0				       \</p>
        <p class="CodeBlock">-nest_owner             $topology_2_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_pool status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_pool"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_pool_handle [keylget multivalue_pool multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_prefix [::ixiangpf::multivalue_config \</p>
        <p class="CodeBlock">-pattern                counter                 \</p>
        <p class="CodeBlock">-counter_start			16					\</p>
        <p class="CodeBlock">-counter_step			0					\</p>
        <p class="CodeBlock">-counter_direction		increment					\</p>
        <p class="CodeBlock">-nest_step				0			\</p>
        <p class="CodeBlock">-nest_owner             $topology_2_handle      \</p>
        <p class="CodeBlock">-nest_enabled           1                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget multivalue_prefix status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $multivalue_prefix"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set multivalue_prefix_handle [keylget multivalue_prefix multivalue_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_server_config_status1 [::ixiangpf::emulation_dhcp_server_config                     \</p>
        <p class="CodeBlock">-mode                                        create                                  \</p>
        <p class="CodeBlock">-handle										 $inner_ipv4_2_handle  					\</p>
        <p class="CodeBlock">-lease_time									 84600							\</p>
        <p class="CodeBlock">-ipaddress_count							 100		                          \</p>
        <p class="CodeBlock">-ipaddress_pool								 $multivalue_pool_handle                         \</p>
        <p class="CodeBlock">-ipaddress_pool_prefix_length 				 $multivalue_prefix_handle                            \</p>
        <p class="CodeBlock">-ip_version                                  4                                       \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_server_config_status1 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $test_name - [keylget dhcp_server_config_status1 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_server_handle [keylget dhcp_server_config_status1 dhcpv4server_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								 DHCPv4 CLIENT</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set device_group_chained_status_1 [::ixiangpf::topology_config      \</p>
        <p class="CodeBlock">-device_group_multiplier      5                         \</p>
        <p class="CodeBlock">-device_group_handle          $device_1_handle      \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget device_group_chained_status_1 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget device_group_chained_status_1 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set chained_dg_1_handle [keylget device_group_chained_status_1 device_group_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_status [::ixiangpf::emulation_dhcp_group_config \</p>
        <p class="CodeBlock">-handle							$chained_dg_1_handle    \</p>
        <p class="CodeBlock">-dhcp_range_ip_type				ipv4						 \</p>
        <p class="CodeBlock">-dhcp_range_renew_timer			2							 \</p>
        <p class="CodeBlock">-use_rapid_commit				0							 \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $test_name - [keylget dhcp_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_client_handle [keylget dhcp_status dhcpv4client_handle]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								START PROTOCOLS</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "Start VXLAN ..."</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set control_status_1 [::ixiangpf::emulation_vxlan_control \</p>
        <p class="CodeBlock">-handle      	  $vxlan_1_handle                    \</p>
        <p class="CodeBlock">-action           start                      \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget control_status_1 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status_1 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set control_status_2 [::ixiangpf::emulation_vxlan_control \</p>
        <p class="CodeBlock">-handle      	  $vxlan_2_handle              \</p>
        <p class="CodeBlock">-action           start                     \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget control_status_2 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status_2 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">while {[lindex [ixNet getA $vxlan_1_handle -stateCounts] 3]!="3" || [lindex [ixNet getA $vxlan_2_handle -stateCounts] 3]!="3"} {</p>
        <p class="CodeBlock">after 1000</p>
        <p class="CodeBlock">puts "Waiting for VXLAN to go up..."</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "VXLAN stacks are up!"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "Start DHCP server..."</p>
        <p class="CodeBlock">set control_status [::ixiangpf::emulation_dhcp_server_control  \</p>
        <p class="CodeBlock">-dhcp_handle 			$dhcp_server_handle 		\</p>
        <p class="CodeBlock">-action 				collect								\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget control_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "Start DHCP clients..."</p>
        <p class="CodeBlock">set control_status [::ixiangpf::emulation_dhcp_control  \</p>
        <p class="CodeBlock">-handle 				$dhcp_client_handle \</p>
        <p class="CodeBlock">-action 				bind							\</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget control_status status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">while {[lindex [ixNet getA $dhcp_client_handle -stateCounts] 3]!="15"} {</p>
        <p class="CodeBlock">after 1000</p>
        <p class="CodeBlock">puts "Waiting for DHCP Clients to go up..."</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">puts "DHCP sessions are up!"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">after 10000</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								STATISTICS</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># CLIENT</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_stats_2 [::ixiangpf::emulation_vxlan_stats      \</p>
        <p class="CodeBlock">-port_handle 			$port_0                                   \</p>
        <p class="CodeBlock">-mode 				aggregate_stats				                                   \</p>
        <p class="CodeBlock">-execution_timeout  30                                              \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget vxlan_stats_2 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_stats_2 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_client_stats [::ixiangpf::emulation_dhcp_stats  \</p>
        <p class="CodeBlock">-port_handle $port_0                    \</p>
        <p class="CodeBlock">-mode aggregate_stats  \</p>
        <p class="CodeBlock">-execution_timeout  30                                              \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_client_stats status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $test_name -[keylget dhcp_client_stats log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "\n\n------------------DHCP Client stats------------------"</p>
        <p class="CodeBlock">show_stats $dhcp_client_stats</p>
        <p class="CodeBlock">puts "\n\n------------------VXLAN stats------------------------"</p>
        <p class="CodeBlock">show_stats $vxlan_stats_2</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># SERVER</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_stats_1 [::ixiangpf::emulation_vxlan_stats      \</p>
        <p class="CodeBlock">-port_handle 			$port_1                                   \</p>
        <p class="CodeBlock">-mode 				aggregate_stats				                                   \</p>
        <p class="CodeBlock">-execution_timeout  30                                              \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">if {[keylget vxlan_stats_1 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget vxlan_stats_1 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set dhcp_server_stats [::ixiangpf::emulation_dhcp_server_stats  \</p>
        <p class="CodeBlock">-port_handle $port_1                    \</p>
        <p class="CodeBlock">-action collect  \</p>
        <p class="CodeBlock">-execution_timeout  30                                              \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_server_stats status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - $test_name -[keylget dhcp_server_stats log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "\n\n------------------DHCP Server stats------------------"</p>
        <p class="CodeBlock">show_stats $dhcp_server_stats</p>
        <p class="CodeBlock">puts "\n\n------------------VXLAN stats------------------------"</p>
        <p class="CodeBlock">show_stats $vxlan_stats_1</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "\n\nVXLAN Sessions up:"</p>
        <p class="CodeBlock">puts "Port 1: [keylget vxlan_stats_2 $port_0.aggregate.sessions_up] VXLAN sessions up !"</p>
        <p class="CodeBlock">puts "Port 2: [keylget vxlan_stats_1 $port_1.aggregate.sessions_up] VXLAN sessions up !"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "\n\nDHCP Server sessions up:"</p>
        <p class="CodeBlock">puts "Port 1: [keylget dhcp_server_stats aggregate.$port_1.sessions_up] DHCP server sessions up !"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "\n\nDHCP Client sessions up:"</p>
        <p class="CodeBlock">puts "Port 2: [keylget dhcp_client_stats $port_0.aggregate.currently_bound] DHCP client sessions up !"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_client_stats $port_0.aggregate.currently_bound] &lt; 15} {</p>
        <p class="CodeBlock">puts "FAIL - Not all DHCP Clients are up!"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if {[keylget dhcp_server_stats aggregate.$port_1.sessions_up] &lt; 1 || [keylget dhcp_server_stats aggregate.$port_1.total_leases_allocated] &lt; 15} {</p>
        <p class="CodeBlock">puts "FAIL - Not all DHCP Servers are up or not all leases are allocated!"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock"># 								STOP VXLAN</p>
        <p class="CodeBlock"># #############################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set vxlan_1_handle [lindex [keylget vxlan_1_status vxlan_handle] 0]</p>
        <p class="CodeBlock">set vxlan_2_handle [lindex [keylget vxlan_2_status vxlan_handle] 0]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set control_status_0 [::ixiangpf::emulation_vxlan_control \</p>
        <p class="CodeBlock">-handle      	  $vxlan_1_handle                    \</p>
        <p class="CodeBlock">-action           stop                      \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">if {[keylget control_status_0 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status_0 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set control_status_1 [::ixiangpf::emulation_vxlan_control \</p>
        <p class="CodeBlock">-handle      	  $vxlan_2_handle              \</p>
        <p class="CodeBlock">-action           stop                     \</p>
        <p class="CodeBlock">]</p>
        <p class="CodeBlock">if {[keylget control_status_1 status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget control_status_1 log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">while {[lindex [ixNet getA $vxlan_1_handle -stateCounts] 1]!="3" || [lindex [ixNet getA $vxlan_2_handle -stateCounts] 1]!="3"} {</p>
        <p class="CodeBlock">after 1000</p>
        <p class="CodeBlock">puts "Waiting for VXLAN to stop..."</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">puts "VXLAN stacks are stopped!"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">while {[lindex [ixNet getA $dhcp_client_handle -stateCounts] 1]!="15" || [lindex [ixNet getA $dhcp_server_handle -stateCounts] 1]!="3"} {</p>
        <p class="CodeBlock">after 1000</p>
        <p class="CodeBlock">puts "Waiting for DHCP to stop..."</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">puts "DHCP is stopped!"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">after 10000</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">set cleanup [::ixia::cleanup_session -reset]</p>
        <p class="CodeBlock">if {[keylget cleanup status] != $::SUCCESS} {</p>
        <p class="CodeBlock">puts "FAIL - [keylget cleanup log]"</p>
        <p class="CodeBlock">return $FAILED</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">puts "Done... IxNetwork session is closed..."</p>
        <p class="CodeBlock">puts ""</p>
        <p class="CodeBlock">puts "!!! PASSED !!!"</p>
        <p class="CodeBlock">return $PASSED</p>
    </body>
</html>