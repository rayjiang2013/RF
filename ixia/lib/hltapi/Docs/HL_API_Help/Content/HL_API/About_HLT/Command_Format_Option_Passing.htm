<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="HL_API_Help.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="High Level API Basics|About HLTAPI|HLTAPI Basics">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" /><title>Command Format: Option Passing</title>
        <link href="../../Resources/Stylesheets/Advanced_Information_Manager.css" rel="stylesheet" type="text/css" />
        <script src="../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../HL_API_Help.htm#HL_API/About_HLT/Command_Format_Option_Passing.htm">Open topic with navigation</a>
        </p>
        <h2>Command Format: Option Passing</h2>
        <p><a name="0_pgfId-967888"></a>
          All the HLTAPI calls use dashed (-) options to pass configuration parameters. Note that the option list can be long. It is possible to put everything on one line when scripting, or you can use multiple lines. In this case, the backslash (\ ) is used at the end of each line (except for the last) to signal line-continuation to Tcl.</p>
        <p><a name="0_pgfId-967890"></a>
          The generic form of a call looks like </p>
        <p class="CodeBlock"><a name="0_pgfId-967891"></a>
          ixia::foo -opt1 val1 -opt2 val2</p>
        <p><a name="0_pgfId-967892"></a>
          The variables, <span class="Code">
opt1</span>
 and <span class="Code">
opt2,</span>
 are options (parameter names), and, <span class="Code">
val1</span>
 and <span class="Code">
val2,</span>
 are values to be passed to the procedure <span class="Code">
ixia::foo</span>
. The value can be a list, such as a list of chassis' IP addresses when chassis chain is required. Both of the following are valid:</p>
        <p class="CodeBlock"><a name="0_pgfId-967893"></a>
          ixia::foo -opt1 val1 val2 -opt2 val3</p>
        <p><a name="0_pgfId-967894"></a>
          or</p>
        <p class="CodeBlock"><a name="0_pgfId-967895"></a>
          ixia::foo -opt1 {val1 val2} -opt2 val3</p>
        <p><a name="0_pgfId-967896"></a>
          The preceding lines have the same effect. The values to be passed should be simple, either a literal (meaning a non-list) or a list of literals. It is possible to pass anything (such as list of lists) but it can be confusing. For example, if you want to pass the list <span class="Code">
{{1 2} {3 4}}</span>
 to <span class="Code">
opt1</span>
, the correct way is:</p>
        <p class="CodeBlock"><a name="0_pgfId-967897"></a>
          ixia::foo -opt1 {{{1 2} {3 4}}}</p>
        <p><a name="0_pgfId-967899"></a>
          The dash (-) signals the option. Therefore, <span class="Code">
-opt1 val1 val2 -opt2 val3</span>
 does not mistake <span class="Code">
val2</span>
 as an option. Consequently, the value to be passed should not start with a dash.</p>
        <p><a name="0_pgfId-967901"></a>
          This is an example for one stream config:</p>
        <p class="CodeBlock"><a name="0_pgfId-967902"></a>
          set status <span class="Code">[ixia::traffic_config\</span></p>
        <p class="CodeBlock"><a name="0_pgfId-967903"></a>
          			-mode create\</p>
        <p class="CodeBlock"><a name="0_pgfId-967904"></a>
          			-port_handle $tx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-967905"></a>
          			-port_handle2 $rx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-967906"></a>
          			-l3_protocol $ip_version\</p>
        <p class="CodeBlock"><a name="0_pgfId-967907"></a>
          			-ip_src_addr $ixia(gig_1_7500a,dst_ip)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967908"></a>
          			-ip_src_mode increment\</p>
        <p class="CodeBlock"><a name="0_pgfId-967909"></a>
          			-ip_src_step 0.0.1.0\</p>
        <p class="CodeBlock"><a name="0_pgfId-967910"></a>
          			-ip_dst_addr $ixia(gig_1_esr1,dst_ip)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967911"></a>
          			-ip_dst_mode increment\</p>
        <p class="CodeBlock"><a name="0_pgfId-967912"></a>
          			-ip_dst_count $num_of_flows \</p>
        <p class="CodeBlock"><a name="0_pgfId-967913"></a>
          			-ip_dst_step 0.0.1.0\</p>
        <p class="CodeBlock"><a name="0_pgfId-967914"></a>
          			-l3_length $packetsize\</p>
        <p class="CodeBlock"><a name="0_pgfId-967915"></a>
          			-rate_pps $max_rate\</p>
        <p class="CodeBlock"><a name="0_pgfId-967916"></a>
          			-mac_src $ixia(gig_1_esr1,src_mac)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967917"></a>
          			-mac_src2 $ixia(gig_1_7500a,src_mac)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967918"></a>
          			-mac_dst $ixia(gig_1_esr1,dst_mac)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967919"></a>
          			-mac_dst2 $ixia(gig_1_7500a,dst_mac)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967920"></a>
          			-transmit_mode multi_burst\</p>
        <p class="CodeBlock"><a name="0_pgfId-967921"></a>
          			-burst_loop_count $num_of_burst\</p>
        <p class="CodeBlock"><a name="0_pgfId-967922"></a>
          			-inter_burst_gap $inter_burst_gap\</p>
        <p class="CodeBlock"><a name="0_pgfId-967923"></a>
          			-pkts_per_burst $num_pkts_to_send \</p>
        <p class="CodeBlock"><a name="0_pgfId-967924"></a>
          			-bidirectional 1]</p>
        <p><a name="0_pgfId-967926"></a>
          In this example, 22 parameters are passed to set up the stream. There are hundreds of options to the <span class="Code">
ixia::traffic_config</span>
 command in the the HLTAPI manual; only specify those needed. Unspecified options use default values. </p>
        <p><a name="0_pgfId-967930"></a>
          Another advantage of options is the extendibility of the library. New options can be added to the HLTAPI calls in the future, while scripts built upon older libraries still work. </p>
        <p><a name="0_pgfId-967932"></a>
          It is possible to reuse part of the options in your script. For example, to create two streams such that the MAC address configurations are the same, first define the MAC, next have it embedded in the procedure call:</p>
        <p class="CodeBlock"><a name="0_pgfId-967933"></a>
          set mac_def \</p>
        <p class="CodeBlock"><a name="0_pgfId-967934"></a>
              [list \</p>
        <p class="CodeBlock"><a name="0_pgfId-967935"></a>
          	 -mac_src $ixia(gig_1_esr1,src_mac) \</p>
        <p class="CodeBlock"><a name="0_pgfId-967936"></a>
          	 -mac_src2 $ixia(gig_1_7500a,src_mac)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967937"></a>
          	 -mac_dst $ixia(gig_1_esr1,dst_mac) \</p>
        <p class="CodeBlock"><a name="0_pgfId-967938"></a>
          	 -mac_dst2 $ixia(gig_1_7500a,dst_mac)]</p>
        <p class="CodeBlock"><a name="0_pgfId-967940"></a>
          set status1 [eval ixia::traffic_config\</p>
        <p class="CodeBlock"><a name="0_pgfId-967941"></a>
          		-mode create\</p>
        <p class="CodeBlock"><a name="0_pgfId-967942"></a>
          		-port_handle $tx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-967943"></a>
          		-port_handle2 $rx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-967944"></a>
          		-l3_protocol $ip_version\</p>
        <p class="CodeBlock"><a name="0_pgfId-967945"></a>
          		-ip_src_addr $ixia(gig_1_7500a,dst_ip)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967946"></a>
          		-ip_src_mode increment\</p>
        <p class="CodeBlock"><a name="0_pgfId-967947"></a>
          		-ip_src_step 0.0.1.0\</p>
        <p class="CodeBlock"><a name="0_pgfId-967948"></a>
          		-ip_dst_addr $ixia(gig_1_esr1,dst_ip)\</p>
        <p class="CodeBlock"><a name="0_pgfId-967949"></a>
          		-ip_dst_mode increment\</p>
        <p class="CodeBlock"><a name="0_pgfId-967950"></a>
          		-ip_dst_count $num_of_flows \</p>
        <p class="CodeBlock"><a name="0_pgfId-967951"></a>
          		-ip_dst_step 0.0.1.0\</p>
        <p class="CodeBlock"><a name="0_pgfId-967952"></a>
          		-l3_length $packetsize\</p>
        <p class="CodeBlock"><a name="0_pgfId-967953"></a>
          		-rate_pps $max_rate\</p>
        <p class="CodeBlock"><a name="0_pgfId-967954"></a>
          		$mac_def\      </p>
        <p class="CodeBlock"><a name="0_pgfId-967955"></a>
                 		-transmit_mode multi_burst\</p>
        <p class="CodeBlock"><a name="0_pgfId-967956"></a>
                   -burst_loop_count $num_of_burst\</p>
        <p class="CodeBlock"><a name="0_pgfId-967957"></a>
                   -inter_burst_gap $inter_burst_gap\</p>
        <p class="CodeBlock"><a name="0_pgfId-967958"></a>
          		-pkts_per_burst $num_pkts_to_send \</p>
        <p class="CodeBlock"><a name="0_pgfId-967959"></a>
          		-bidirectional 1]</p>
        <p class="CodeBlock"><a name="0_pgfId-971822"></a>
          &#160;</p>
        <p><a name="0_pgfId-967961"></a>
          Notice the <span class="Code">
eval</span>
 command right before <span class="Code">
ixia::traffic_config</span>
. This is used to expand <span class="Code">
$mac_def</span>
 in the option list. </p>
        <h3><a name="0_pgfId-967963"></a>
          Returned List Format: Keyed List</h3>
        <p><a name="0_pgfId-967965"></a>
          All the procedure calls return a data structure called a <span class="Bold">keyed list</span>. A keyed list is a Tclx feature. </p>
        <p><a name="0_pgfId-967967"></a>
          The reason for using keyed lists is the need for representing data in an hierarchical structure (for example, traffic statistics). </p>
        <p><a name="0_pgfId-972304"></a>
          As an example, to store the statistics from two ports (1/1/1 and 1/1/2), where under 1/1/1 we have TX's port stats and per-stream stats, and under 1/1/2 we have RX stats, an array can be used (in this case A):</p>
        <p class="CodeBlock"><a name="0_pgfId-967968"></a>
          set A(1/1/1.TX.port) 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967969"></a>
          set A(1/1/1.TX.stream.1) 1000</p>
        <p class="CodeBlock"><a name="0_pgfId-967970"></a>
          set A(1/1/1.TX.stream.2) 1000</p>
        <p class="CodeBlock"><a name="0_pgfId-967971"></a>
          set A(1/1/2.RX.port) 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967972"></a>
          set A(1/1/1.RX.stream.1) 1000</p>
        <p class="CodeBlock"><a name="0_pgfId-967973"></a>
          set A(1/1/1.RX.stream.2) 1000</p>
        <p class="CodeBlock"><a name="0_pgfId-967975"></a>
          The alternative way, using a keyed list, would be</p>
        <p class="CodeBlock"><a name="0_pgfId-967976"></a>
          keylset A 1/1/1.TX.port 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967977"></a>
          keylset A 1/1/1.TX.stream.1 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967978"></a>
          keylset A 1/1/1.TX.stream.2 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967979"></a>
          keylset A 1/1/2.RX.port 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967980"></a>
          keylset A 1/1/2.RX.stream.1 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967981"></a>
          keylset A 1/1/2.RX.stream.2 2000</p>
        <p class="CodeBlock"><a name="0_pgfId-971896"></a>
          &#160;</p>
        <p><a name="0_pgfId-967983"></a>
          Instead of an array, A is defined as a keyed list. This is just another list in Tcl, except that the list can be operated on using <span class="Code">
keylset</span>
 and <span class="Code">
keylget</span>
 commands for setting and retrieving value for a `key.'</p>
        <p><a name="0_pgfId-967985"></a>
          The advantage of using keyed lists versus the array representation is that keyed lists can be passed in and out of procedures, because from Tcl's point of view it is nothing but a list. In addition, a keyed list is truly hierarchical. For instance, the value of the key 1/1/1 of A in the example is another keyed list with keys TX and RX.</p>
        <p><a name="0_pgfId-967987"></a>
          To retrieve a value or a sub-tree from a keyed list, use <span class="Code">
keylget</span>
:</p>
        <p class="CodeBlock"><a name="0_pgfId-967988"></a>
          % set v [keylget A 1/1/1.TX.stream.1]</p>
        <p class="CodeBlock"><a name="0_pgfId-967989"></a>
          2000</p>
        <p class="CodeBlock"><a name="0_pgfId-967990"></a>
          % set tx [keylget A 1/1/1.TX]</p>
        <p class="CodeBlock"><a name="0_pgfId-967991"></a>
          {port 2000} {stream {{1 2000} {2 2000}}}</p>
        <p class="CodeBlock"><a name="0_pgfId-967992"></a>
          % set v [keylget tx stream.1]</p>
        <p class="CodeBlock"><a name="0_pgfId-967993"></a>
          2000</p>
        <p class="CodeBlock"><a name="0_pgfId-971917"></a>
          &#160;</p>
        <p class="Note"><a name="0_pgfId-967994"></a> The first <span class="Code">
keylget</span>
 gets the element directly, and the second one gets a sub-tree of the keyed list. </p>
        <p><a name="0_pgfId-967996"></a>
          For all HLTAPI procedures, the returning keyed list has a key named <span class="Code">
status</span>
. This is used for checking whether the call runs successfully. If the value of the status is <span class="Code">
$::FAILURE</span>
, then there is another key log available for the error log. The following code is typical for error checking:</p>
        <p class="CodeBlock"><a name="0_pgfId-967998"></a>
              set connect_info [ixia::connect\</p>
        <p class="CodeBlock"><a name="0_pgfId-967999"></a>
          			    -reset\</p>
        <p class="CodeBlock"><a name="0_pgfId-968000"></a>
          			    -device $ixia(device)\</p>
        <p class="CodeBlock"><a name="0_pgfId-968001"></a>
          			    -port_list $port_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968002"></a>
          			    -username ciscoUser]</p>
        <p class="CodeBlock"><a name="0_pgfId-968004"></a>
              if { [keylget connect_info status] ==$FAILURE } {</p>
        <p class="CodeBlock"><a name="0_pgfId-968005"></a>
          	puts "Failed to conect to Ixia Chassis:\</p>
        <p class="CodeBlock"><a name="0_pgfId-968006"></a>
                          $ixia(device) \n [keylget connect_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968007"></a>
          	# ...other commands to take care of the error condition</p>
        <p class="CodeBlock"><a name="0_pgfId-968008"></a>
          }</p>
        <p class="CodeBlock"><a name="0_pgfId-968010"></a>
          # we now know status is success so we look into other keys</p>
        <h3><a name="0_pgfId-968013"></a>
          ixia::connect and ixia::cleanup_session</h3>
        <p><a name="0_pgfId-968015"></a>
          The first Ixia call should be <span class="Code">
ixia::connect</span>
. This command sends a chassis IP or name (or a list of them if the chassis chain is used), a list of ports to be reserved for the script, username, whether the script takes the ownership of the ports by force, and Tcl server. </p>
        <p><a name="0_pgfId-968017"></a>
          Tcl server is needed only in a Unix environment, and only when the chassis does not act as the Tcl server (this is not a common scenario). This is specified with <br />-tcl_server option. </p>
        <p><a name="0_pgfId-980421"></a>
          IxNetwork Tcl server is needed if IxNetwork Tcl Api is used by the HLTAPI. This is specified with -ixnetwork_tcl_server. </p>
        <p><a name="0_pgfId-980425"></a>
          The default values for -tcl_server and -ixnetwork_tcl_server is discussed in the section <em class="Hyperlink"><a href="Support_for_IxNetwork_70.htm#0_42570">Old API vs. New API</a></em>
. </p>
        <p><a name="0_pgfId-968019"></a>
          On failure, the returning keyed list has the key status and log like all other HLTAPI calls. On success, in addition to the status key, it has the <span class="Code">
port_handle</span>
 key that stores the handles to be used in other HLTAPI procedure calls. </p>
        <p><a name="0_pgfId-968021"></a>
          For an example using ports 1/3 and 1/4, after <span class="Code">
ixia::connect</span>
 succeeds the corresponding handles should be returned by:</p>
        <p class="CodeBlock"><a name="0_pgfId-968022"></a>
          set handle1 [keylget connect_info port_handle.$chassis.1/3]</p>
        <p class="CodeBlock"><a name="0_pgfId-968023"></a>
          set handle2 [keylget connect_info port_handle.$chassis.1/4]</p>
        <p class="Code-Small"><a name="0_pgfId-971938"></a>
          &#160;</p>
        <p><a name="0_pgfId-968025"></a>
          Likewise, the last Ixia call should be<span class="Code">
 ixia::cleanup_session</span>
. This command is necessary if AUTOEASY is used in the Cisco ATS environment. Without the cleanup, test suites fail for the next script. </p>
        <p><a name="0_pgfId-968027"></a>
          The typical uses for ixia::connect and ixia::cleanup_session are:</p>
        <p class="CodeBlock"><a name="0_pgfId-968028"></a>
          set connect_info [ixia::connect\</p>
        <p class="CodeBlock"><a name="0_pgfId-968029"></a>
                                  -reset\</p>
        <p class="CodeBlock"><a name="0_pgfId-968030"></a>
                                  -device $ixia(device)\</p>
        <p class="CodeBlock"><a name="0_pgfId-968031"></a>
                                  -port_list $port_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968032"></a>
                                  -username ciscoUser]</p>
        <p class="CodeBlock"><a name="0_pgfId-971950"></a>
          &#160;</p>
        <p><a name="0_pgfId-968033"></a>
          and  </p>
        <p class="CodeBlock"><a name="0_pgfId-968034"></a>
          set cleanup_info [ixia::cleanup_session\</p>
        <p class="CodeBlock"><a name="0_pgfId-968035"></a>
          		    -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968036"></a>
          		    -reset]</p>
        <p class="CodeBlock"><a name="0_pgfId-971954"></a>
          &#160;</p>
        <p><a name="0_pgfId-968037"></a>
          Again, we recommend you to perform proper error checking by looking at the status key.</p>
        <h3><a name="0_pgfId-968040"></a>
          ixia::interface_config</h3>
        <p><a name="0_pgfId-989574"></a>
          This procedure is used to set up Ixia ports. This command defines the following: </p>
        <ul>
            <li value="1"><a name="0_pgfId-989575"></a>
            Physical layer: for example, copper or fiber for dual-PHY GigE ports </li>
            <li value="2"><a name="0_pgfId-989576"></a>
            The interface type: for example, using ATM versus POS for OC3 ports; PPP versus HDLC for POS</li>
            <li value="3"><a name="0_pgfId-968045"></a>
            Port-type related attributes: for example, clock-source, payload scrambling, TX/RX FCS for SONET, and auto-negotiation for Ethernet</li>
            <li value="4"><a name="0_pgfId-968046"></a>
            Layer 2-3 addresses (MAC, VLAN, IPv4, IPv6, gateway for Ethernet)</li>
        </ul>
        <p><a name="0_pgfId-968048"></a>
          A typical GigE port can be set up with the call:</p>
        <p class="CodeBlock"><a name="0_pgfId-968049"></a>
          set interface_status [ixia::interface_config \</p>
        <p class="CodeBlock"><a name="0_pgfId-968050"></a>
          -port_handle $handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-968051"></a>
          -phy_mode fiber\</p>
        <p class="CodeBlock"><a name="0_pgfId-968052"></a>
          -autonegotiation 0 ]</p>
        <p class="CodeBlock"><a name="0_pgfId-972865"></a>
          &#160;</p>
        <p><a name="0_pgfId-968054"></a>
          If the interface has Layer 2 and Layer 3 information for ARP and ping, the following specifies this configuration:</p>
        <p class="CodeBlock"><a name="0_pgfId-968055"></a>
          	set interface_status [ixia::interface_config \</p>
        <p class="CodeBlock"><a name="0_pgfId-968056"></a>
          		-port_handle $handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-968057"></a>
          		-phy_mode fiber\</p>
        <p class="CodeBlock"><a name="0_pgfId-968058"></a>
          		-autonegotiation 0\</p>
        <p class="CodeBlock"><a name="0_pgfId-968059"></a>
          		-src_mac_addr $mac_addr\</p>
        <p class="CodeBlock"><a name="0_pgfId-968060"></a>
          		-intf_ip_addr $ip_addr \</p>
        <p class="CodeBlock"><a name="0_pgfId-968061"></a>
          		-netmask $ip_netmask\</p>
        <p class="CodeBlock"><a name="0_pgfId-968062"></a>
          		-gateway $ip_gateway\</p>
        <p class="CodeBlock"><a name="0_pgfId-968063"></a>
          		-arp_send_req 1 \</p>
        <p class="CodeBlock"><a name="0_pgfId-968064"></a>
          		-autonegotiation 0]</p>
        <p class="CodeBlock"><a name="0_pgfId-971974"></a>
          &#160;</p>
        <p><a name="0_pgfId-968066"></a>
          Other than the general purpose options, there are many other Ixia-specific ones. The most significant ones are related to Ixia ports' TX mode and RX mode.</p>
        <p><a name="0_pgfId-972375"></a>
          There are two ways to transmit multiple streams from an Ixia port. One is called `packet stream mode,' which at anytime transmits one stream till the end of the last packet of this stream, then switch to another stream. This mode can be specified as <span class="Code">
-transmit_mode stream</span>
. The other method, called `advanced stream mode' and specified as <span class="Code">
-transmit_mode advanced</span>
, interleaves packets from all streams. The advanced stream mode is the default HLTAPI scheduling mode.</p>
        <p><a name="0_pgfId-968070"></a>
          The difference between the two transmit modes is that, packet stream mode sends a single stream, while advanced mode multiplexes several streams. For example, assume there are three 5 Mbps traffic streams defined on a link. Setting the packet stream mode results in 5 Mbps traffic on the link, because the port sends one stream at a time. For advanced mode the resulting speed is 15 Mbps, as streams are multiplexed.</p>
        <p><a name="0_pgfId-968072"></a>
          Currently, only continuous and single burst at constant-bit-rate traffic are available for advanced mode. Multiple bursts traffic is available on packet stream mode. </p>
        <h3><a name="0_pgfId-968077"></a>
          HLTAPI Traffic Models</h3>
        <p><a name="0_pgfId-968079"></a>
          Before describing how to set up traffic streams and get per-stream statistics, it is helpful to understand the traffic model employed by HLTAPI. The traffic model is different from what Ixia users are accustomed to. </p>
        <p><a name="0_pgfId-972450"></a>
          The building blocks of traffic are streams. Each stream is given a globally unique stream ID when created. This ID is used later on to retrieve stream statistics, such as packet rates, packets transmitted, and received per-stream latencies (max, min, average). </p>
        <p><a name="0_pgfId-968081"></a>
          This means the receiver port sorts traffic statistics according to streams. This is different from Ixia's concept of streams (where streams are only associated with the transmit side). In contrast, the traffic model Ixia takes is to decouple TX and RX sides. The RX side has no idea of TX streams. It sorts the packet stats by `packet groups' by using the 2-byte Packet Group ID (PGID) in the packet content. Hence, it is possible to have streams created from different ports and received at one port being counted as one packet group, if the PGID of the packets are the same. Or one TX stream can be sorted at RX as many packet groups because the PGID filed is varying in the stream setup.</p>
        <h3><a name="0_pgfId-968085"></a>
          ixia::traffic_config</h3>
        <p><a name="0_pgfId-968087"></a>
          The procedure <span class="Code">
ixia::traffic_config</span>
 is used for stream creation and modification, as well as a special mode reset, to clear all streams at a TX port. The traffic creation can be done by using one of the Ixia applications: IxOS, or IxNetwork. The -traffic_generator option specifies which application is used. Following are the valid choices:</p>
        <ul>
            <li value="1"><a name="0_pgfId-980473"></a>
            ixos-IxOS API</li>
            <li value="2"><a name="0_pgfId-980475"></a>
            ixnetwork-ixNetwork API</li>
        </ul>
        <p><a name="0_pgfId-980481"></a>
          Depending on the traffic_generator setting, the available option changes. Some are valid only for ixos traffic_generator and some are valid only for ixnetwork traffic_generator. The returned keylists are specific to the traffic_generator setting, as well. Check the individual options in traffic_config for details. </p>
        <p class="Note"><a name="0_pgfId-968089"></a>
          Unlike other commands, only one port handler can be passed to one call at a time. To clear all streams for all ports, create a loop or spread the code out for each port handler. </p>
        <p><a name="0_pgfId-968091"></a>
          Before building up streams for a new test case, streams should be cleared. The following code is typical for this purpose:</p>
        <p class="CodeBlock"><a name="0_pgfId-968092"></a>
          # clear all the streams</p>
        <p class="CodeBlock"><a name="0_pgfId-968093"></a>
          foreach phandle $port_handle_list {</p>
        <p class="CodeBlock"><a name="0_pgfId-968094"></a>
          	set clear_info [ixia::traffic_config \</p>
        <p class="CodeBlock"><a name="0_pgfId-968095"></a>
          				-mode reset \</p>
        <p class="CodeBlock"><a name="0_pgfId-968096"></a>
          				-port_handle $phandle]</p>
        <p class="CodeBlock"><a name="0_pgfId-968098"></a>
          	if {[keylget clear_info status] == $::FAILURE} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968099"></a>
          	    puts "Fail to reset Ixia interface $phandle: \</p>
        <p class="CodeBlock"><a name="0_pgfId-968100"></a>
                    [keylget clear_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968101"></a>
          	    return</p>
        <p class="CodeBlock"><a name="0_pgfId-968102"></a>
          	}</p>
        <p class="CodeBlock"><a name="0_pgfId-968103"></a>
          }</p>
        <p class="CodeBlock"><a name="0_pgfId-971983"></a>
          &#160;</p>
        <p><a name="0_pgfId-968105"></a>
          To add one traffic stream to a TX port, use <span class="Code">
-mode</span>
 create. There is a very large list of configuration options. This is the way to set packet size, protocol headers, payload contents, user defined fields, FCS options, and traffic patterns. </p>
        <p><a name="0_pgfId-968107"></a>
          Upon the procedure's successful return, the keyed list has a key <span class="Code">
stream_id</span>
. This is the stream ID that should be kept for stats retrieval. In general, do not make assumptions on this symbolic value. </p>
        <p><a name="0_pgfId-968109"></a>
          The procedure call also allows bidirectional configuration. In this case, two traffic streams are created to pass both <span class="Code">
-port_handle</span>
 and <span class="Code">
-port_handle2</span>
 for the TX ports of the streams. The two streams have opposite source/destination MAC and IP addresses. </p>
        <p><a name="0_pgfId-968111"></a>
          Two stream IDs for bidirectional stream creation are stored in the returning keyed list. Here is an example of retrieving them:</p>
        <p><a name="0_pgfId-968113"></a>
          set stream_info [ixia::traffic_config\</p>
        <p class="CodeBlock"><a name="0_pgfId-968114"></a>
          		     -mode create\</p>
        <p class="CodeBlock"><a name="0_pgfId-968115"></a>
          		     -port_handle $tx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-968116"></a>
          		     -port_handle2 $rx_handle\</p>
        <p class="CodeBlock"><a name="0_pgfId-968117"></a>
          		     -l3_protocol ipv4\</p>
        <p class="CodeBlock"><a name="0_pgfId-968118"></a>
          		     -ip_src_addr $tx_ip\</p>
        <p class="CodeBlock"><a name="0_pgfId-968119"></a>
          		     -ip_dst_addr $rx_ip\</p>
        <p class="CodeBlock"><a name="0_pgfId-968120"></a>
          		     -l3_length $ip_size\</p>
        <p class="CodeBlock"><a name="0_pgfId-968121"></a>
          		     -bidirectional 1]</p>
        <p class="CodeBlock"><a name="0_pgfId-968123"></a>
          # omit error checking here ...</p>
        <p class="CodeBlock"><a name="0_pgfId-968124"></a>
          set streamID_forward [keylget stream_info stream_id.$tx_handle]</p>
        <p class="CodeBlock"><a name="0_pgfId-968125"></a>
          set streamID_backward [keylget stream_info stream_id.$rx_handle]</p>
        <p><a name="0_pgfId-968127"></a>
          To modify or remove an existing stream, use <span class="Code">
-mode modify</span>
 or <span class="Code">
-mode remove</span>
. In both cases, stream ID has to be passed. For stream modification, only specify the options being modified. </p>
        <h3><a name="0_pgfId-968131"></a>
          ixia::traffic_control</h3>
        <p><a name="0_pgfId-968133"></a>
          The command <span class="Code">
ixia::traffic_control</span>
 is used to clear statistics counters, and start and stop transmission. It is not necessary to worry about timestamp synchronization, as the <span class="Code">
clear_stats</span>
 action automatically does so. This also turns on packet capturing and PGID stats gathering for receiving ports. </p>
        <p><a name="0_pgfId-992238"></a>
          The following code is typical for traffic control:</p>
        <p class="CodeBlock"><a name="0_pgfId-968136"></a>
          # clearing stats at both side</p>
        <p class="CodeBlock"><a name="0_pgfId-968137"></a>
          set stats_info [ixia::traffic_control \</p>
        <p class="CodeBlock"><a name="0_pgfId-968138"></a>
          		    -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968139"></a>
          		    -action clear_stats]</p>
        <p class="CodeBlock"><a name="0_pgfId-968140"></a>
          if {[keylget stats_info status] != $SUCCESS} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968141"></a>
              return "Failed to clean stats: \</p>
        <p class="CodeBlock"><a name="0_pgfId-968142"></a>
                        [keylget stats_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968143"></a>
          }</p>
        <p class="CodeBlock"><a name="0_pgfId-968145"></a>
          # start TX at all ports</p>
        <p class="CodeBlock"><a name="0_pgfId-968146"></a>
          set run_info [ixia::traffic_control\</p>
        <p class="CodeBlock"><a name="0_pgfId-968147"></a>
          		  -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968148"></a>
          		  -action run]</p>
        <p class="CodeBlock"><a name="0_pgfId-968149"></a>
          if {[keylget run_info status] != $SUCCESS} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968150"></a>
              return "Failed to start TX: \</p>
        <p class="CodeBlock"><a name="0_pgfId-968151"></a>
                        [keylget run_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968152"></a>
          }</p>
        <p class="CodeBlock"><a name="0_pgfId-968155"></a>
          # wait for a duration</p>
        <p class="CodeBlock"><a name="0_pgfId-968156"></a>
          after $duration</p>
        <p class="CodeBlock"><a name="0_pgfId-968158"></a>
          # stop TX for all ports</p>
        <p class="CodeBlock"><a name="0_pgfId-968159"></a>
          set stop_info [ixia::traffic_control\</p>
        <p class="CodeBlock"><a name="0_pgfId-968160"></a>
          		  -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968161"></a>
          		  -action stop]</p>
        <p class="CodeBlock"><a name="0_pgfId-968162"></a>
          if {[keylget stop_info status] != $SUCCESS} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968163"></a>
              return "Failed to stop TX: \</p>
        <p class="CodeBlock"><a name="0_pgfId-968164"></a>
                        [keylget stop_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968165"></a>
          }</p>
        <p class="CodeBlock"><a name="0_pgfId-972056"></a>
          &#160;</p>
        <p><a name="0_pgfId-992243"></a>
          If latency distribution is required, specify the bins. For example, to sort latencies in the bins 0-10ms, 10ms-20ms, 20ms-30ms, 30ms-40ms, and beyond 40ms, configure it with <span class="Code">
clear_stats</span>
:</p>
        <p class="CodeBlock"><a name="0_pgfId-968168"></a>
          set stats_info [ixia::traffic_control \</p>
        <p class="CodeBlock"><a name="0_pgfId-968169"></a>
          		    -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968170"></a>
          		    -action clear_stats\</p>
        <p class="CodeBlock"><a name="0_pgfId-968171"></a>
          		    - latency_bins	 5 \</p>
        <p class="CodeBlock"><a name="0_pgfId-968172"></a>
              -latency_values 10 20 30 40]</p>
        <p class="Note"><a name="0_pgfId-968174"></a>
          The convention here is to specify total number of latency bins with<span class="Code"><br />-latency_bins</span>
, and the boundaries of the bins with <span class="Code">
-latency_values</span>
; the list has one less element than the number of latency bins. The unit of the latency bin value is millisecond. </p>
        <h3><a name="0_pgfId-968178"></a>
          ixia::traffic_stats</h3>
        <p><a name="0_pgfId-968180"></a>
          The procedure <span class="Code">
ixia::traffic_stats</span>
 is used to retrieve statistics counters. It can be used either when traffic is still running or when it has stopped. There are many types of stats; the main ones include aggregate, stream, flow, or PGID. The aggregate stats are TX and RX counters associated with the ports. There are no aggregate latency data in aggregate stats, but they are available at stream level. PGID stats are Ixia specific. Flow stats are only available when traffic_generator is IxNetwork. This gathers stats for each flow. A flow can be defined by source and destination IP, by L2VPN tunnel, or by other characteristic. </p>
        <p><a name="0_pgfId-992262"></a>
          Calling the procedure for stats retrieval is simple. Here is an example for getting aggregate stats counters for a set of handles:</p>
        <p class="CodeBlock"><a name="0_pgfId-992263"></a>
          set stats [ixia::traffic_stats\</p>
        <p class="CodeBlock"><a name="0_pgfId-968184"></a>
          	       -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968185"></a>
          	       -mode aggregate]</p>
        <p class="CodeBlock"><a name="0_pgfId-968186"></a>
          if {[keylget stats status] == $FAILURE} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968187"></a>
              return "Failed to get stats:\</p>
        <p class="CodeBlock"><a name="0_pgfId-968188"></a>
                        [keylget stats_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968189"></a>
          }</p>
        <p><a name="0_pgfId-968190"></a>
          The option <span class="Code">
-mode</span>
 aggregate is not necessary because it is the default choice. </p>
        <p><a name="0_pgfId-968192"></a>
          On success, the returning keyed list stores counters with keys: </p>
        <p class="CodeBlock"><a name="0_pgfId-968193"></a>
          	&lt;port_handle&gt;.aggregate.&lt;tx|rx&gt;.&lt;counter_type&gt;</p>
        <p class="CodeBlock"><a name="0_pgfId-968194"></a>
          For example, the key 1/3/4.aggregate.rx.total_pkts corresponds to total receiving packet count for port 1/3/4. The command manual gives the full list of keys.</p>
        <p class="CodeBlock"><a name="0_pgfId-968196"></a>
          To get stream stats, do something like </p>
        <p class="CodeBlock"><a name="0_pgfId-968197"></a>
          set stats [ixia::traffic_stats\</p>
        <p class="CodeBlock"><a name="0_pgfId-968198"></a>
          	       -port_handle $port_handle_list\</p>
        <p class="CodeBlock"><a name="0_pgfId-968199"></a>
          	       -mode streams]</p>
        <p class="CodeBlock"><a name="0_pgfId-968200"></a>
          if {[keylget stats status] == $FAILURE} {</p>
        <p class="CodeBlock"><a name="0_pgfId-968201"></a>
              return "Failed to get stats:\</p>
        <p class="CodeBlock"><a name="0_pgfId-968202"></a>
                        [keylget stats_info log]"</p>
        <p class="CodeBlock"><a name="0_pgfId-968203"></a>
          }</p>
        <p><a name="0_pgfId-968204"></a>
          This gives stream stats for all streams. To get only one stream, use the option <span class="Code">
-stream &lt;stream_id&gt;</span>
. The returning keyed list has keys</p>
        <p class="CodeBlock"><a name="0_pgfId-968206"></a>
          	&lt;port_handle&gt;.stream.&lt;stream_id&gt;.&lt;tx|rx&gt;.&lt;counter_type&gt;</p>
        <p><a name="0_pgfId-968207"></a>
          such as <span class="Code">
1/3/4.stream.2.rx.avg_delay</span>
 for average latency (in ns) for stream 2.</p>
        <p><a name="0_pgfId-968209"></a>
          If the latency bin option has been specified with <span class="Code">
ixia::traffic_control</span>
, the stream stats also includes latency bin information, with the key</p>
        <p class="CodeBlock"><a name="0_pgfId-968210"></a>
          &lt;port_handle&gt;.stream.&lt;id&gt;.rx.latency_bin.&lt;bin_number&gt;.&lt;counter_type&gt;</p>
        <p><a name="0_pgfId-968211"></a>
          Consult the manual for the complete list. </p>
    </body>
</html>