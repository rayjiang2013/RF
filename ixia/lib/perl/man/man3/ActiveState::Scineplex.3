.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Scineplex 3"
.TH ActiveState::Scineplex 3 "2006-11-03" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Scineplex \- Perl extension to access Scineplex code lexer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use ActiveState::Scineplex qw(Annotate);
\&  $color_info = Annotate($code, $lang, %options);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Scineplex is a C library for heuristic parsing of source code in
various languages.  Scineplex is based on the Scintilla sources.  The
\&\f(CW\*(C`ActiveState::Scineplex\*(C'\fR module provide a Perl interface to this library.
.PP
Currently this module implements an interface consisting of one function,
Annotate, which returns a scineplex-driven colorization for one or
more lines of source code.  It either returns a string giving the
colorization or throws an exception.
.PP
.Vb 1
\&    $color_info = Annotate($code, $lang, %options);
.Ve
.PP
The \f(CW$code\fR is one or more lines of source-code to be analyzed passed as
a single string.  The lines are separated by any newline sequence.
.PP
The \f(CW$lang\fR argument can be one of 'perl', 'python', 'ruby', 'vbscript', or 'xslt'.  The
default is 'perl'.
.PP
Additional \f(CW%options\fR can be passed as key/value pairs.  The following
options are supported (defaults in parentheses):
.PP
.Vb 6
\&    outputFormat => \*(Aqhtml\*(Aq | \*(Aqjson\*(Aq | \*(Aqline\*(Aq | \*(Aqclassic\*(Aq (\*(Aqline\*(Aq)
\&    parsingStartState => number (0) 
\&    DumpSource => 0 | 1 (0)
\&    DumpEndState => 0 | 1 (0)
\&    DumpFoldLevels => 0 | 1 (0)
\&    StopAfterDataSectionLine1 => 0 | 1 (0)
.Ve
.PP
The \f(CW\*(C`outputFormat\*(C'\fR is the most important option.  In \f(CW\*(C`classic\*(C'\fR mode,
\&\f(CW\*(C`Annotate\*(C'\fR echos back each character on the start of a line, followed
by separating white-space and its style value:
.PP
.Vb 2
\&    $res = Annotate(\*(Aq$abc = 3;\*(Aq, \*(Aqperl\*(Aq, outputFormat => \*(Aqclassic\*(Aq);
\&    print $res;
\&
\&    $       12
\&    a       12
\&    b       12
\&    c       12
\&    chr(32) 0
\&    =       10
\&    chr(32) 0
\&    3       4
\&    ;       10
\&    chr(10) 0
.Ve
.PP
Symbolic names for the numeric style values can be looked up in the
\&\f(CW%SCE_TOKEN\fR hash (exportable).  For example \f(CW$SCE_TOKEN\fR{perl}{12} is the
string \*(L"\s-1SCE_PL_SCALAR\*(R".\s0
.PP
Setting \f(CW\*(C`outputFormat\*(C'\fR to \f(CW\*(C`line\*(C'\fR gives a terser output, and
represents each numeric style with the character corresponding to the
style added to the \s-1ASCII\s0 value of character '0':
.PP
.Vb 2
\&    $res = Annotate(\*(Aq$abc = 3;\*(Aq, \*(Aqperl\*(Aq, outputFormat => \*(Aqline\*(Aq);
\&    print $res;
\&
\&    <<<<0:04:
.Ve
.PP
Setting \f(CW\*(C`outputFormat\*(C'\fR to \f(CW\*(C`html\*(C'\fR returns an HTML-encoded string
containing the original code wrapped in \f(CW\*(C`span\*(C'\fR tags with generic
classes with names like \*(L"variable\*(R", \*(L"operator\*(R", etc.  This kind of
output is designed to be wrapped in \f(CW\*(C`pre\*(C'\fR tags, and styled with a \s-1CSS\s0
file of that contains rules like
.PP
.Vb 4
\&    pre span.comments {
\&      color: 0x696969;
\&      font\-style: italic;
\&    }
.Ve
.PP
Default text is not placed in a span tag.
.PP
Setting \f(CW\*(C`outputFormat\*(C'\fR to \f(CW\*(C`json\*(C'\fR returns a \s-1JSON\s0 array of arrays.
Each one of the inner arrays contains a generic style label together
with the span in positions; [$tag, \f(CW$line\fR, \f(CW$col\fR, \f(CW$len\fR].  The returned
\&\s-1JSON\s0 array will also be valid Perl code and can be converted to a Perl
array using Perl's builtin \f(CW\*(C`eval\*(C'\fR function.
.PP
Example:
.PP
.Vb 3
\&    $res = Annotate(\*(Aq$abc = 3;\*(Aq, \*(Aqperl\*(Aq, outputFormat => \*(Aqjson\*(Aq);
\&    print $res;
\&    $array = eval $res;
\&
\&    [
\&     ["variable",1,0,4],
\&     ["operator",1,5,1],
\&     ["number",1,7,1],
\&     ["operator",1,8,1]
\&    ]
.Ve
.PP
The \f(CW\*(C`parsingStartState\*(C'\fR setting should be used only when you know
that the code starts with a given style, such as lines 3\-5 of a
multi-line string.
.PP
The \f(CW\*(C`DumpSource\*(C'\fR flag is used only with \f(CW\*(C`line\*(C'\fR output.  It is
intended mostly for human consumption, and produces output like the
following:
.PP
.Vb 2
\&    $res = Annotate(\*(Aq$abc = 3;\*(Aq, \*(Aqperl\*(Aq, DumpSource=>1);
\&    print $res;
\&
\&    $abc = 3;
\&    <<<<0:04:
.Ve
.PP
The \f(CW\*(C`DumpEndState\*(C'\fR is used only in \f(CW\*(C`line\*(C'\fR mode, and gives the styles
for whichever characters constitute the line-end sequence:
.PP
.Vb 2
\&    $res = Annotate(qq($abc = 3;\er\en), \*(Aqperl\*(Aq, DumpSource=>1, DumpEndState=>1);
\&    print $res;
\&
\&    $abc = 3;
\&    <<<<0:04:00
.Ve
.PP
The \f(CW\*(C`DumpFoldLevels\*(C'\fR is used only in \f(CW\*(C`line\*(C'\fR mode, and gives the fold
levels as a 4\-hex\-digit sequence in a leading column.
.PP
.Vb 2
\&    $res = Annotate(qq(if(1) {\en$abc = 3;\en}\en), \*(Aqperl\*(Aq, DumpSource=>1, DumpEndState=>1);
\&    print $res;
\&
\&    2400 if(1) {
\&         55:4:0:
\&    0401 $abc = 3
\&         <<<<0:04
\&    0401 }
\&         :
.Ve
.PP
The \f(CW\*(C`StopAfterDataSectionLine1\*(C'\fR is used only for Perl code in \f(CW\*(C`line\*(C'\fR
mode.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Info on scintilla available at http://www.scintilla.org.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005 by ActiveState Software Inc.
