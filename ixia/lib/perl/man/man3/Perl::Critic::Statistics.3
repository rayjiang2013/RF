.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Statistics 3"
.TH Perl::Critic::Statistics 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Statistics \- Compile stats on Perl::Critic violations.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class accumulates statistics on Perl::Critic violations across one or
more files.  \s-1NOTE:\s0 This class is experimental and subject to change.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a non-public class.  Its interface is subject
to change without notice.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new()""" 4
.el .IP "\f(CWnew()\fR" 4
.IX Item "new()"
Create a new instance of Perl::Critic::Statistics.  No arguments are supported
at this time.
.ie n .IP """ accumulate( $doc, \e@violations ) """ 4
.el .IP "\f(CW accumulate( $doc, \e@violations ) \fR" 4
.IX Item " accumulate( $doc, @violations ) "
Accumulates statistics about the \f(CW$doc\fR and the \f(CW@violations\fR that were
found.
.ie n .IP """modules()""" 4
.el .IP "\f(CWmodules()\fR" 4
.IX Item "modules()"
The number of chunks of code (usually files) that have been analyzed.
.ie n .IP """subs()""" 4
.el .IP "\f(CWsubs()\fR" 4
.IX Item "subs()"
The total number of subroutines analyzed by this Critic.
.ie n .IP """statements()""" 4
.el .IP "\f(CWstatements()\fR" 4
.IX Item "statements()"
The total number of statements analyzed by this Critic.
.ie n .IP """lines()""" 4
.el .IP "\f(CWlines()\fR" 4
.IX Item "lines()"
The total number of lines of code analyzed by this Critic.
.ie n .IP """lines_of_blank()""" 4
.el .IP "\f(CWlines_of_blank()\fR" 4
.IX Item "lines_of_blank()"
The total number of blank lines analyzed by this Critic. This includes only
blank lines in code, not \s-1POD\s0 or data.
.ie n .IP """lines_of_comment()""" 4
.el .IP "\f(CWlines_of_comment()\fR" 4
.IX Item "lines_of_comment()"
The total number of comment lines analyzed by this Critic. This includes only
lines whose first non-whitespace character is \f(CW\*(C`#\*(C'\fR.
.ie n .IP """lines_of_data()""" 4
.el .IP "\f(CWlines_of_data()\fR" 4
.IX Item "lines_of_data()"
The total number of lines of data section analyzed by this Critic, not
counting the \f(CW\*(C`_\|_END_\|_\*(C'\fR or \f(CW\*(C`_\|_DATA_\|_\*(C'\fR line. \s-1POD\s0 in a data section is counted
as \s-1POD,\s0 not data.
.ie n .IP """lines_of_perl()""" 4
.el .IP "\f(CWlines_of_perl()\fR" 4
.IX Item "lines_of_perl()"
The total number of lines of Perl code analyzed by this Critic. Perl appearing
in the data section is not counted.
.ie n .IP """lines_of_pod()""" 4
.el .IP "\f(CWlines_of_pod()\fR" 4
.IX Item "lines_of_pod()"
The total number of lines of \s-1POD\s0 analyzed by this Critic. Pod occurring in a
data section is counted as \s-1POD,\s0 not as data.
.ie n .IP """violations_by_severity()""" 4
.el .IP "\f(CWviolations_by_severity()\fR" 4
.IX Item "violations_by_severity()"
The number of violations of each severity found by this Critic as a
reference to a hash keyed by severity.
.ie n .IP """violations_by_policy()""" 4
.el .IP "\f(CWviolations_by_policy()\fR" 4
.IX Item "violations_by_policy()"
The number of violations of each policy found by this Critic as a
reference to a hash keyed by full policy name.
.ie n .IP """total_violations()""" 4
.el .IP "\f(CWtotal_violations()\fR" 4
.IX Item "total_violations()"
The the total number of violations found by this Critic.
.ie n .IP """statements_other_than_subs()""" 4
.el .IP "\f(CWstatements_other_than_subs()\fR" 4
.IX Item "statements_other_than_subs()"
The total number of statements minus the number of subroutines.
Useful because a subroutine is considered a statement by \s-1PPI.\s0
.ie n .IP """average_sub_mccabe()""" 4
.el .IP "\f(CWaverage_sub_mccabe()\fR" 4
.IX Item "average_sub_mccabe()"
The average McCabe score of all scanned subroutines.
.ie n .IP """violations_per_file()""" 4
.el .IP "\f(CWviolations_per_file()\fR" 4
.IX Item "violations_per_file()"
The total violations divided by the number of modules.
.ie n .IP """violations_per_statement()""" 4
.el .IP "\f(CWviolations_per_statement()\fR" 4
.IX Item "violations_per_statement()"
The total violations divided by the number statements minus
subroutines.
.ie n .IP """violations_per_line_of_code()""" 4
.el .IP "\f(CWviolations_per_line_of_code()\fR" 4
.IX Item "violations_per_line_of_code()"
The total violations divided by the lines of code.
.SH "AUTHOR"
.IX Header "AUTHOR"
Elliot Shank \f(CW\*(C`<perl@galumph.com>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007\-2011 Elliot Shank.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
