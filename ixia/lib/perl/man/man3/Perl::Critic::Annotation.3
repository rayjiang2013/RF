.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Annotation 3"
.TH Perl::Critic::Annotation 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Annotation \- A "## no critic" annotation in a document.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Perl::Critic::Annotation;
\&  $annotation = Perl::Critic::Annotation\->new( \-element => $no_critic_ppi_element );
\&
\&  $bool = $annotation\->disables_line( $number );
\&  $bool = $annotation\->disables_policy( $policy_object );
\&  $bool = $annotation\->disables_all_policies();
\&
\&  ($start, $end) = $annotation\->effective_range();
\&  @disabled_policy_names = $annotation\->disabled_policies();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Perl::Critic::Annotation\*(C'\fR represents a single \f(CW"## no critic"\fR
annotation in a <PPI:Document>.  The Annotation takes care of parsing
the annotation and keeps track of which lines and Policies it affects.
It is intended to encapsulate the details of the no-critic
annotations, and to provide a way for Policy objects to interact with
the annotations (via a Perl::Critic::Document).
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a non-public class.  Its interface is subject
to change without notice.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .IP "create_annotations( \-doc => $doc )" 4
.el .IP "create_annotations( \-doc => \f(CW$doc\fR )" 4
.IX Item "create_annotations( -doc => $doc )"
Given a Perl::Critic::Document, finds all the \f(CW"## no critic"\fR
annotations and constructs a new \f(CW\*(C`Perl::Critic::Annotation\*(C'\fR for each
one and returns them.  The order of the returned objects is not
defined.  It is generally expected that clients will use this
interface rather than calling the \f(CW\*(C`Perl::Critic::Annotation\*(C'\fR
constructor directly.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP """new( \-element => $ppi_annotation_element )""" 4
.el .IP "\f(CWnew( \-element => $ppi_annotation_element )\fR" 4
.IX Item "new( -element => $ppi_annotation_element )"
Returns a reference to a new Annotation object.  The \fB\-element\fR
argument is required and should be a \f(CW\*(C`PPI::Token::Comment\*(C'\fR that
conforms to the \f(CW"## no critic"\fR syntax.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """disables_line( $line )""" 4
.el .IP "\f(CWdisables_line( $line )\fR" 4
.IX Item "disables_line( $line )"
Returns true if this Annotation disables \f(CW$line\fR for any (or all)
Policies.
.ie n .IP """disables_policy( $policy_object )""" 4
.el .IP "\f(CWdisables_policy( $policy_object )\fR" 4
.IX Item "disables_policy( $policy_object )"
.PD 0
.ie n .IP """disables_policy( $policy_name )""" 4
.el .IP "\f(CWdisables_policy( $policy_name )\fR" 4
.IX Item "disables_policy( $policy_name )"
.PD
Returns true if this Annotation disables \f(CW$polciy_object\fR or
\&\f(CW$policy_name\fR at any (or all) lines.
.ie n .IP """disables_all_policies()""" 4
.el .IP "\f(CWdisables_all_policies()\fR" 4
.IX Item "disables_all_policies()"
Returns true if this Annotation disables all Policies at any (or all)
lines.  If this method returns true, \f(CW\*(C`disabled_policies\*(C'\fR will return
an empty list.
.ie n .IP """effective_range()""" 4
.el .IP "\f(CWeffective_range()\fR" 4
.IX Item "effective_range()"
Returns a two-element list, representing the first and last line
numbers where this Annotation has effect.
.ie n .IP """disabled_policies()""" 4
.el .IP "\f(CWdisabled_policies()\fR" 4
.IX Item "disabled_policies()"
Returns a list of the names of the Policies that are affected by this
Annotation.  If this list is empty, then it means that all Policies
are affected by this Annotation, and \f(CW\*(C`disables_all_policies()\*(C'\fR should
return true.
.ie n .IP """element()""" 4
.el .IP "\f(CWelement()\fR" 4
.IX Item "element()"
Returns the PPI::Element where this annotation started.  This is
typically an instance of PPI::Token::Comment.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeffrey Ryan Thalhammer <jeff@imaginative\-software.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005\-2011 Imaginative Software Systems.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
