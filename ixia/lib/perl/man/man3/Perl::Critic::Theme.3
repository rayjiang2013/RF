.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Theme 3"
.TH Perl::Critic::Theme 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Theme \- Construct thematic sets of policies.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a helper class for evaluating theme expressions into sets of
Policy objects.  There are no user-serviceable parts here.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a non-public class.  Its interface is subject
to change without notice.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new( \-rule => $rule_expression )""" 4
.el .IP "\f(CWnew( \-rule => $rule_expression )\fR" 4
.IX Item "new( -rule => $rule_expression )"
Returns a reference to a new Perl::Critic::Theme object.  \f(CW\*(C`\-rule\*(C'\fR is
a string expression that evaluates to true or false for each Policy..
See \*(L"\s-1THEME RULES\*(R"\s0 for more information.
.ie n .IP """policy_is_thematic( \-policy => $policy )""" 4
.el .IP "\f(CWpolicy_is_thematic( \-policy => $policy )\fR" 4
.IX Item "policy_is_thematic( -policy => $policy )"
Given a reference to a Perl::Critic::Policy
object, this method returns evaluates the rule against the themes that
are associated with the Policy.  Returns 1 if the Policy satisfies the
rule, 0 otherwise.
.ie n .IP """ rule() """ 4
.el .IP "\f(CW rule() \fR" 4
.IX Item " rule() "
Returns the rule expression that was used to construct this Theme.
The rule may have been translated into a normalized expression.  See
\&\*(L"\s-1THEME RULES\*(R"\s0 for more information.
.SS "\s-1THEME RULES\s0"
.IX Subsection "THEME RULES"
A theme rule is a simple boolean expression, where the operands are
the names of any of the themes associated with the
Perl::Critic::Polices.
.PP
Theme names can be combined with logical operators to form arbitrarily
complex expressions.  Precedence is the same as normal mathematics,
but you can use parentheses to enforce precedence as well.  Supported
operators are:
.PP
.Vb 5
\&   Operator    Altertative    Example
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   &&          and            \*(Aqpbp && core\*(Aq
\&   ||          or             \*(Aqpbp || (bugs && security)\*(Aq
\&   !           not            \*(Aqpbp && ! (portability || complexity)
.Ve
.PP
See \*(L"\s-1CONFIGURATION\*(R"\s0 in Perl::Critic for more information about
customizing the themes for each Policy.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .IP """cook_rule( $rule )""" 4
.el .IP "\f(CWcook_rule( $rule )\fR" 4
.IX Item "cook_rule( $rule )"
Standardize a rule into a almost executable Perl code.  The \*(L"almost\*(R"
comes from the fact that theme names are left as is.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.ie n .IP "$RULE_INVALID_CHARACTER_REGEX" 4
.el .IP "\f(CW$RULE_INVALID_CHARACTER_REGEX\fR" 4
.IX Item "$RULE_INVALID_CHARACTER_REGEX"
A regular expression that will return the first character in the
matched expression that is not valid in a rule.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeffrey Ryan Thalhammer  <jeff@imaginative\-software.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006\-2011 Imaginative Software Systems
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
