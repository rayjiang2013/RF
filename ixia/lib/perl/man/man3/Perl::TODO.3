.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TODO 3"
.TH TODO 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::TODO \- Things for Perl::Critic developers to do
.SH "SOURCE"
.IX Header "SOURCE"
.Vb 4
\&         $URL: http://perlcritic.tigris.org/svn/perlcritic/trunk/distributions/Perl\-Critic/TODO.pod $
\&        $Date: 2011\-05\-30 09:21:47 \-0700 (Mon, 30 May 2011) $
\&      $Author: wyant $
\&    $Revision: 4085 $
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Perl-Critic-More is a separate distribution for less-widely-accepted
policies.  It contains its own \s-1TODO\s0.pod.
.SH "NEW FEATURES"
.IX Header "NEW FEATURES"
.IP "\(bu" 4
Report \s-1PBP\s0 and Safari sections in addition to \s-1PBP\s0 page numbers.
.Sp
Something like
.Sp
.Vb 5
\&    Readonly::Scalar my $EXPL => {
\&        pbp_pages       => [ 57 ],
\&        pbp_section     => \*(Aq5.2\*(Aq,
\&        safari_section  => something,
\&    };
.Ve
.IP "\(bu" 4
Include \s-1PBP\s0 references and Safari sections in the documentation.
.Sp
Perhaps these could be injected into the \s-1POD\s0 at build time, based on the data
in the code.  But that data is not entirely static, so I'm not sure how it
would work for Policies that dynamically determine the \s-1PBP\s0 references.
.Sp
Perhaps it would be good enough to just create a one-off tool that would
inject the \s-1PBP\s0 and/or Safari references into the \s-1POD\s0 one time, and we could
manually deal with Policies that behave oddly.
.Sp
Much better would be to put the information in the \s-1POD\s0 in a structured manner
and parse it out in the code, something along the lines of
.Sp
.Vb 1
\&    =head1 METADATA
\&
\&    =over
\&
\&    =item Default Themes
\&
\&    core bugs pbp
\&
\&    =item Default Severity
\&
\&    3
\&
\&    =item Perl Best Practices Page Numbers
\&
\&    193, 195
\&
\&    =back
.Ve
.Sp
and so on.
.IP "\(bu" 4
Add a file Parameter::Behavior.
.IP "\(bu" 4
Allow values of (at least) string-list Parameters to be specified in a file.
.Sp
For the benefit of PodSpelling, etc.
.IP "\(bu" 4
Enhance string-list Behavior to allow specification of delimiters.
.Sp
For things like RequirePodSections.
.IP "\(bu" 4
Add queries to \-\-list option to \fIperlcritic\fR.
.Sp
List Policies based upon severity, theme, and (what I want this second)
applies_to.
.IP "\(bu" 4
Add formatting of \-\-list output.
.Sp
Support Jeff Bisbee's use case (he dumps all the policies in severity order
with full descriptions and other metadata).
.IP "\(bu" 4
Support for \f(CW\*(C`#line 123 "filename"\*(C'\fR directives.
.Sp
For code generators and template languages that allow inline Perl code.
.Sp
Yes, somebody has an in-house templating system where they've written a custom
test module that extracts the perl code from a template and critiques it.
.Sp
Actually, this would be useful for programs: Module::Build \*(L"fixes\*(R" shebang
lines so that there's the bit about invoking perl if the program is attempted
to be run by a Bourne shell, which throws the line numbers off when using
Test::P::C on the contents of a \f(CW\*(C`blib\*(C'\fR directory.
.Sp
This has been implemented in \s-1PPI,\s0 but hasn't been released yet.  When it does
come out, we need to change the line and file reported by Violations.
.IP "\(bu" 4
Enhance statistics.
.Sp
\&\- Blank line count
.Sp
\&\- \s-1POD\s0 line count
.Sp
\&\- Comment line count
.Sp
\&\- Data section count
.Sp
Proposed implementation committed 15\-Mar\-2007 by wyant, about revision 3240.
.IP "\(bu" 4
Detect 5.10 source and enable stuff for that.
.Sp
For example, treat \f(CW\*(C`say\*(C'\fR as equivalent to \f(CW\*(C`print\*(C'\fR.
.IP "\(bu" 4
Detect 5.12 source and enable stuff for that.
.Sp
Yes, this is long-term, and is really a list of stuff from 5.011 to enable if
it makes it into 5.12, gleaned from the perl511xdelta files:
.Sp
\&'use 5.011;' implies 'use strict;' and 'use feature qw{ :5.11 };' per
perl5110delta.
.Sp
\&'sub foo { ... }' (yes, with the subroutine body being an elipsis a.k.a. the
\&'yada yada' operator) compiles but fails at runtime per perl5110delta. \s-1PPI\s0
seems to parse this sanely as of 1.206.
.Sp
\&'package Foo 1.23;' is equivalent to 'package Foo; our \f(CW$VERSION\fR = 1.23;' per
perl5111delta. \s-1PPI\s0 seems to parse this sanely as of 1.206.
.Sp
Nothing additional found in perl5112delta, which is the most recent as of the
addition of this item.
.IP "\(bu" 4
Detect 5.14 source and enable stuff for that.
.Sp
5.13.7 allows references in many places where arrays or hashes used to
be required (e.g. \f(CW\*(C`push $stack, \*(Aqfoo\*(Aq\*(C'\fR where \f(CW$stack\fR is an array
ref). Not sure what policies are affected.
.Sp
Lexical regular expression modifier defaults via (e.g.)
\&\f(CW\*(C`use re \*(Aq/smx\*(Aq\*(C'\fR). This also interacts with
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR. 5.13.7.
.IP "\(bu" 4
Support a means of failing if a Policy isn't installed.
.Sp
For example, the self compliance test now depends upon a Policy in the More
distribution.
.Sp
Something like using a \*(L"+\*(R" sign in front of the Policy name in its
configuration block, analogous to the \*(L"\-\*(R" sign used for disabling a policy,
e.g. "\f(CW\*(C`[+Example::Policy]\*(C'\fR".
.IP "\(bu" 4
Threading
.Sp
Pretty obviously, Perl::Critic is readily parallelizable, just do a document per
thread.  (\*(L"readily\*(R" being conceptual, not necessarily practical)  Although
there's now \f(CW\*(C`Policy::prepare_to_scan_document()\*(C'\fR, given perl's thread data
sharing model, this shouldn't be an issue.
.IP "\(bu" 4
Add support in .run files for regexes for violation descriptions.
.IP "\(bu" 4
Add support for \*(L"## use critic (blah)\*(R".
.Sp
If I've got:
.Sp
.Vb 1
\&    ## no critic (SomePolicy)
\&
\&    ...
\&
\&    ## no critic (ADifferentPolicy)
\&
\&    ...
\&
\&    ## no critic (YetAnotherPolicy)
.Ve
.Sp
If I want to turn \f(CW\*(C`YetAnotherPolicy\*(C'\fR back on but neither \f(CW\*(C`SomePolicy\*(C'\fR nor
\&\f(CW\*(C`ADifferentPolicy\*(C'\fR, I've got to do this:
.Sp
.Vb 2
\&    ## use critic
\&    ## no critic (SomePolicy, ADifferentPolicy)
.Ve
.Sp
Why can't I do this:
.Sp
.Vb 1
\&    ## use critic (SomeOtherPolicy)
.Ve
.IP "\(bu" 4
Make color work on Windows.
.Sp
Use Win32::Console::ANSI like App::Ack.
.IP "\(bu" 4
Create P::C::Node and make P::C::Document a subclass and make use of \fIPPIx::Utilities::Node::split_ppi_node_by_namespace()\fR to provide per-namespace caching of lookups that are now on P::C::Document.
.Sp
This is necessary to get P::C::Moose Policies correct.
.IP "\(bu" 4
Use version to declare \f(CW$VERSION\fR numbers throughout P::C
.Sp
\&\s-1PBP\s0 recommends using the version module.  I chose not to follow that
recommendation because version didn't work with the Perl v5.6.1 that I had
at \f(CW$work\fR at that time (and I really wanted to use Perl::Critic at work).
But now the version has been updated and those bugs may have been fixed,
or perhaps we just don't care about running on Perl v5.6.1 any more.  So
maybe now we can go ahead and use version.
.SH "BUGS/LIMITATIONS"
.IX Header "BUGS/LIMITATIONS"
Document bugs for individual Policies in the Policies themselves.  Users
should be aware of limitations.  (And, hey, we might get patches that way.)
.SH "OTHER PBP POLICIES THAT SEEM FEASIBLE TO IMPLEMENT"
.IX Header "OTHER PBP POLICIES THAT SEEM FEASIBLE TO IMPLEMENT"
.IP "\(bu" 4
Modules::RequireUseVersion [405\-406]
.IP "\(bu" 4
Modules::RequireThreePartVersion [405\-406]
.IP "\(bu" 4
NamingConventions::RequireArrayAndHashReferenceVariablesEndWith_Ref [41\-42]
.Sp
Check for \f(CW\*(C`$variable = [...]\*(C'\fR, \f(CW\*(C`$variable = {...}\*(C'\fR, \f(CW\*(C`$variable\->[...]\*(C'\fR, and
\&\f(CW\*(C`$variable\->{...}\*(C'\fR.
.IP "\(bu" 4
Objects::ProhibitRestrictedHashes [322\-323]
.Sp
Look for use of the bad methods in Hash::Util.
.IP "\(bu" 4
Objects::ProhibitLValueAccessors [346\-349]
.Sp
Look for the \f(CW\*(C`:lvalue\*(C'\fR subroutine attribute.
.SH "NON-PBP POLICIES WANTED"
.IX Header "NON-PBP POLICIES WANTED"
.IP "\(bu" 4
Subroutines::RequireArgumentValidation
.Sp
Enforce the use of Params::Validate or Params::Util or some other
argument validation mechanism.  This could be one Policy that
can be configured for different validation mechanisms, or we could
have a separate Policy for each mechanism, and let the user choose
which one they want to use (I think I prefer the later).
.IP "\(bu" 4
NamingConventions::ProhibitMisspelledSymbolNames
.Sp
The idea behind this policy is to encourage better names for variables
and subroutines by enforcing correct spelling and prohibiting the use of
home-grown abbreviations.  Assuming that the author uses underscores or
camel-case, it should be possible to split symbols into words, and then look
them up in a dictionary (see PodSpelling).  This policy should probably have
a similar stopwords feature as well.
.IP "\(bu" 4
Documentation::RequireModuleAbstract
.Sp
Require a \f(CW\*(C`=head1 NAME\*(C'\fR \s-1POD\s0 section with content that matches
\&\f(CW\*(C`\eA \es* [\ew:]+ \es+ \- \es+ \eS\*(C'\fR.  The single hyphen is the important bit.  Also,
must be a single line.
.IP "\(bu" 4
Expressions::RequireFatCommasInHashConstructors
.IP "\(bu" 4
ErrorHandling::RequireLocalizingGlobalErrorVariablesInDESTROY
.Sp
Prevent \f(CW$.\fR, \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR from being cleared unexpectedly
by \s-1DESTROY\s0 methods.
.Sp
.Vb 1
\&    package Foo;
\&
\&    sub DESTROY {
\&        die "Died in Foo::DESTROY()";
\&    }
\&
\&    package main;
\&
\&    eval {
\&        my $foo = Foo\->new();
\&
\&        die "Died in eval."
\&    }
\&    print $@;   # "Died in Foo::DESTROY()", not "Died in eval.".
.Ve
.Sp
See <http://use.perl.org/~Ovid/journal/36767> and
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/2008\-06/msg00542.html>.
.IP "\(bu" 4
Expressions::ProhibitDecimalWithBitwiseOperator
.IP "\(bu" 4
Expressions::ProhibitStringsWithBitwiseOperator
.IP "\(bu" 4
InputOutput::ProhibitMagicDiamond
.Sp
Steal the idea from B::Lint.
.IP "\(bu" 4
NamingConventions::RequireArrayAndHashReferenceVariablesEndWith_Ref
.IP "\(bu" 4
Programs::RequireShebang
.Sp
Anything that is a program should have a shebang line.  This includes .t
files.
.IP "\(bu" 4
Modules::RequirePackageDeclarationAsFirstStatementInModule
.Sp
See <http://blog.woobling.org/2009/11/scoping\-of\-current\-package.html>.
Ouch.
.IP "\(bu" 4
BuiltInFunctions::RequireConstantSprintfFormat
.IP "\(bu" 4
BuiltInFunctions::RequireConstantUnpackFormat
.Sp
<http://diotalevi.isa\-geek.net/~josh/yapc\-lint/slides/slide5.html>
.IP "\(bu" 4
Miscellanea::ProhibitObnoxiousComments
.Sp
Forbid excessive hash marks e.g. \*(L"#### This is a loud comment ####\*(R".
Make the obnoxious pattern configurable
.IP "\(bu" 4
ValuesAndExpressions::RequireNotOperator
.Sp
Require the use of \*(L"not\*(R" instead of \*(L"!\*(R", except when this would contradict
ProhibitMixedBooleanOperators.  This may be better suited for
Perl::Critic::More.
.IP "\(bu" 4
ValuesAndExpressions::ProhibitUnusedReadonlyConstants
.Sp
We'll only be able to look at lexicals.  For similar reasons, we can't do
anything about constant.
.IP "\(bu" 4
Modules::RequireExplicitImporting
.Sp
Require every \f(CW\*(C`use\*(C'\fR statement to have an explicit import list.  You could
still get around this by calling \f(CW\*(C`import\*(C'\fR directly.
.IP "\(bu" 4
Modules::ForbidImporting
.Sp
Require every \f(CW\*(C`use\*(C'\fR to have an explicitly empty import list.  This is for
folks who like to see fully-qualified function names.  Should probably provide
a list of exempt modules (like FindBin);
.IP "\(bu" 4
ControlStructures::ProhibitIncludeViaDo
.Sp
Forbid \f(CW\*(C`do "foo.pl"\*(C'\fR.  Not sure about this policy name.
.IP "\(bu" 4
Variables::ProhibitUseVars
.Sp
Disallow \f(CW\*(C`use vars qw(...)\*(C'\fR and require \f(CW\*(C`our $foo\*(C'\fR instead.  This
contradicts Miscellanea::Prohibit5006isms.  Maybe verify \f(CW\*(C`use 5.6\*(C'\fR before
applying this policy.  Low severity.
.IP "\(bu" 4
VariablesAndExpressions::ProhibitQuotedHashKeys
.Sp
Forbid quotes around hash keys, unless they are really needed.  This is
against what Damian says.  Suggested by Adam Kennedy.  Low severity.
.IP "\(bu" 4
CodeLayout::ProhibitFunctionalNew
.Sp
Good: \f(CW\*(C`Foo::Bar\->new\*(C'\fR, Bad: \f(CW\*(C`new Foo::Bar\*(C'\fR
.IP "\(bu" 4
RegularExpressions::ProhibitSWSWSW
.Sp
Require \f(CW\*(C`split\*(C'\fR instead of \f(CW\*(C`m/\es*\ew*\es*\ew*\es*/\*(C'\fR.  From \s-1MJD\s0's Red Flags.
.IP "\(bu" 4
Documentation::RequireSynopsis
.IP "\(bu" 4
Documentation::RequireLicense
.Sp
These are simplified versions of Documentation::RequirePodSections.
.IP "\(bu" 4
Documentation::RequireValidSynopsis
.Sp
The Synopsis section must be all indented and must be syntactically valid Perl
(as validated by \s-1PPI\s0).
.IP "\(bu" 4
Documentation::ProhibitEmptySections
.Sp
Any \f(CW\*(C`=headN\*(C'\fR and \f(CW\*(C`=over\*(C'\fR sections must not be empty.  This helps catch
boilerplate (although Test::Pod should catch empty \f(CW\*(C`=over\*(C'\fR blocks).
.Sp
On the other hand, \f(CW\*(C`=item ...\*(C'\fR sections can be empty, since the item label is
content.
.IP "\(bu" 4
Miscellaneous::ProhibitBoilerplate
.Sp
Complain about copy-and-paste code or docs from h2xs, Module::Starter::*, etc.
.Sp
Here's a non-PPI implementation:
<http://search.cpan.org/src/JJORE/Carp\-Clan\-5.8/t/04boilerplate.t>
.IP "\(bu" 4
NamingConventions::ProhibitPackagesSubroutinesAndBarewordFileHandlesWithTheSameNames
.Sp
See
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/2009\-01/msg00685.html>.
.IP "\(bu" 4
BuiltinFunctions::ProhibitExtraneousScalarCall
.Sp
Recommend that \f(CW\*(C`if (scalar @array)\*(C'\fR be rewritten as \f(CW\*(C`if (@array)\*(C'\fR.
.IP "\(bu" 4
RegularExpressions::ProhibitMixedDelimiters
.Sp
Ban s{foo}(bar)
.IP "\(bu" 4
RegularExpressions::ProhibitScalarAsRegexp
.Sp
Ban naked strings as regexps, like:
.Sp
.Vb 1
\&    print 1 if $str =~ $regexp;
.Ve
.Sp
Instead, it should be:
.Sp
.Vb 1
\&    print 1 if $str =~ m/$regexp/;
.Ve
.Sp
or
.Sp
.Vb 1
\&    print 1 if $str =~ m/$regexp/xms;
.Ve
.IP "\(bu" 4
ValuesAndExpressions::RequireInterpolatedStringyEval
.Sp
Ensure that the argument to a stringy eval is not a constant string.  That's
just wasteful.  Real world examples include:
.Sp
.Vb 1
\&  eval \*(Aquse Optional::Module\*(Aq;
.Ve
.Sp
which is better written as
.Sp
.Vb 1
\&  eval { require Optional::Module; Optional::Module\->import };
.Ve
.Sp
for performance gains and compile-time syntax checking.
.Sp
Question: This is very similar to BuiltInFunctions::ProhibitStringyEval. What
does the new policy buy us? Could we get the same thing with an option on the
latter to forbid un-interpolated includes even if \f(CW\*(C`allow_includes\*(C'\fR is turned
on?
.IP "\(bu" 4
RegularExpressions::ProhibitUnnecessaryEscapes
.Sp
Complain if user puts a backslash escape in front of non-special characters.
For example:
.Sp
.Vb 1
\&   m/\e!/;
.Ve
.Sp
Make exceptions for \f(CW\*(C`\e"\*(C'\fR, \f(CW\*(C`\e\*(Aq\*(C'\fR and \f(CW\*(C`\e\`\*(C'\fR since those are often inserted to
workaround bugs in syntax highlighting.
.Sp
Note that this is different inside character classes, where only \f(CW\*(C`^\*(C'\fR, \f(CW\*(C`]\*(C'\fR
and \f(CW\*(C`\-\*(C'\fR need to be escaped, I think.  Caret only needs to be escaped at the
beginning, and dash does \s-1NOT\s0 need to be escaped at the beginning and end.  See
perlreref.
.IP "\(bu" 4
Steal ideas from Dunce::Files.
.Sp
Can someone expand this entry, please?
.IP "\(bu" 4
ControlStructures::ProhibitAssigmentInConditional
.IP "\(bu" 4
ValuesAndExpressions::RequireConstantBeforeEquals
.IP "\(bu" 4
ValuesAndExpressions::RequireConstantBeforeOperator
.Sp
<http://use.perl.org/~stu42j/journal/36412>
.Sp
Just about everyone has been bitten by \f(CW\*(C`if ($x = 10) { ... }\*(C'\fR when they meant
to use \f(CW\*(C`==\*(C'\fR.  A safer style is \f(CW\*(C`10 == $x\*(C'\fR because omitting the second \f(CW\*(C`=\*(C'\fR
yields a noisy compile-time failure instead of silent runtime error.
.Sp
ProhibitAssigmentInConditional complains if the condition of a while, until,
if or unless is solely an assignment.  If it's anything more complex (like
\&\f(CW\*(C`if (($x=10)){}\*(C'\fR or \f(CW\*(C`while ($x=$y=$z){}\*(C'\fR), there is no warning.
.Sp
RequireConstantBeforeEquals complains if the left side of an \f(CW\*(C`==\*(C'\fR is a
variable while the right side is a constant.
.Sp
RequireConstantBeforeOperator complains if the left side of any comparison
operator (\f(CW\*(C`==\*(C'\fR, \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`&lt;\*(C'\fR, etc) is a variable while the right side is a
constant.
.IP "\(bu" 4
InputOutput::ProhibitUTF8IOLayer
.Sp
http://www.perlfoundation.org/perl5/index.cgi?the_utf8_perlio_layer
.IP "\(bu" 4
BuiltinFunctions::ProhibitExit(?:InModules)?
.Sp
Forbid \f(CW\*(C`exit()\*(C'\fR in files that lack a shebang.  Inspired by
<http://use.perl.org/~Ovid/journal/36746> and an analogous checker in
FindBugs.
.IP "\(bu" 4
Modules::ProhibitRedundantLoading
.Sp
Don't allow a package to \*(L"use\*(R" the same module more than once, unless
there is a \*(L"no <module>\*(R" between them.
.Sp
See https://rt.cpan.org/Ticket/Display.html?id=38074.
.IP "\(bu" 4
ErrorHandling::RequireLocalizingEVAL_ERRORInDESTROY
.Sp
The opposite side of ErrorHandling::RequireCheckingReturnValueOfEval.
.SH "REFACTORINGS and ENHANCEMENTS"
.IX Header "REFACTORINGS and ENHANCEMENTS"
.IP "\(bu" 4
Reformat all the \s-1POD\s0 to use 78 columns instead of 70.
.Sp
This thing of having different widths for the documentation and the code is
rediculous.  Don't do this until after the next non-dev release.  Elliot is
considering doing a special release only including this change so that the
search.cpan.org diff tool doesn't entirely break.
.IP "\(bu" 4
Eliminate use of IO::String
.Sp
I'm pretty sure that opening references to scalars is in 5.6, so IO::String
isn't necessary.
.IP "\(bu" 4
Give Perl::Critic::Command a proper \s-1API.\s0
.Sp
Now that we've got the guts of perlcritic in there, we should make the
it available to users.
.IP "\(bu" 4
Create constants for the \s-1PPI\s0 location array elements.
.IP "\(bu" 4
Some means of detecting \*(L"runaway\*(R" \f(CW\*(C`##no critic\*(C'\fR
.Sp
Elliot was talking to a couple of users at ETech and one of their major
concerns was that they were using \f(CW\*(C`##no critic\*(C'\fR and forgetting to do a
\&\f(CW\*(C`##use critic\*(C'\fR after the problematic section.  Perhaps an option to
\&\fIperlcritic\fR to scan for such things is in order.
.IP "\(bu" 4
Change \s-1API\s0 to use named parameters
.Sp
Most of the methods on the public classes use named parameters for passing
arguments.  I'd like to extend that pattern to include all object-methods.
Static methods can still use positional parameters.
.IP "\(bu" 4
Enhance \fIP::C::critique()\fR to accept files, directories, or code strings
.Sp
Just like \fIbin/perlcritic\fR does now.
.IP "\(bu" 4
Add \f(CW\*(C`\-cache\*(C'\fR flag to \fIbin/perlcritic\fR
.Sp
If enabled, this turns on PPI::Cache:
.Sp
.Vb 4
\&    require PPI::Cache;
\&    my $cache_path = "/tmp/test\-perl\-critic\-cache\-$ENV{USER}";
\&    mkdir $cache_path, oct 700 if (! \-d $cache_path);
\&    PPI::Cache\->import(path => $cache_path);
.Ve
.Sp
This cache directory should perhaps include the \s-1PPI\s0 version number!  At least
until \s-1PPI\s0 incorporates its own version number in the cache.
.Sp
(see \fIt/40_criticize.t\fR for a more robust implementation)
.IP "\(bu" 4
Use hash-lookup instead of \f(CW\*(C`List::MoreUtils::any\*(C'\fR function.
.Sp
In several places, Perl::Critic uses \f(CW\*(C`List::MoreUtils::any\*(C'\fR to see if a
string is a member of a list.  Instead, I suggest using a named subroutine
that does a hash-lookup like this:
.Sp
.Vb 2
\&    my %logical_ops = hashify( qw( ! || && ||= &&= and or not ) );
\&    sub is_logical_op { return exists $logical_ops{ $_[0] }; }
.Ve
.Sp
Question: Why?
.Sp
Answer: Readability, mostly.  Performance, maybe.
.SH "PPI BUGS"
.IX Header "PPI BUGS"
We're waiting on the following bugs to get fixed in a \s-1CPAN\s0 release of \s-1PPI:\s0
.IP "\fIPPI::Token::descendant_of()\fR" 4
.IX Item "PPI::Token::descendant_of()"
Exists in svn.  Replace \fI_descendant_of()\fR in RequireCheckingReturnValueOfEval
with that, once it is released, because it's faster and native.
.IP "Newlines" 4
.IX Item "Newlines"
\&\s-1PPI\s0 does not preserve newlines.  That makes
CodeLayout::RequireConsistentNewlines impossible to implement under \s-1PPI. \s0 For
now, it's implemented by pulling the source out of the file and skipping \s-1PPI.\s0
.Sp
It's unlikely that \s-1PPI\s0 will support mixed newlines anytime soon.
.IP "Operators" 4
.IX Item "Operators"
ValuesAndExpressions::ProhibitMismatchedOperators has two workarounds for \s-1PPI\s0
bugs with parsing operators.  Many of these bugs have been fixed in \s-1PPI,\s0 so it
would be good to check if those workarounds are still needed.
.IP "Regexp methods" 4
.IX Item "Regexp methods"
Not strictly a bug \*(-- the \s-1PPI\s0 Regexp classes have a dearth of accessor methods
as of v1.118, meaning that we have to do messy digging into internals.  I
wrote Perl::Critic:Utils::PPIRegexp to encapsulate this messiness, but it
would be nicer to have an official interface in \s-1PPI.\s0
.IP "QuoteLike::Words in the place of a ForLoop" 4
.IX Item "QuoteLike::Words in the place of a ForLoop"
\&\s-1PPI\s0 incorrectly parses \f(CW\*(C`<for qw<blah\*(C'\fR {}>>.
