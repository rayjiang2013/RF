.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::OptionsProcessor 3"
.TH Perl::Critic::OptionsProcessor 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::OptionsProcessor \- The global configuration default values, combined with command\-line values.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a helper class that encapsulates the default parameters for
constructing a Perl::Critic::Config object.
There are no user-serviceable parts here.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a non-public class.  Its interface is subject
to change without notice.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP """ new( %DEFAULT_PARAMS ) """ 4
.el .IP "\f(CW new( %DEFAULT_PARAMS ) \fR" 4
.IX Item " new( %DEFAULT_PARAMS ) "
Returns a reference to a new \f(CW\*(C`Perl::Critic::OptionsProcessor\*(C'\fR object.
You can override the coded defaults by passing in name-value pairs
that correspond to the methods listed below.
.Sp
This is usually only invoked by
Perl::Critic::UserProfile, which passes
in the global values from a \fI.perlcriticrc\fR file.  This object
contains no information for individual Policies.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """ exclude() """ 4
.el .IP "\f(CW exclude() \fR" 4
.IX Item " exclude() "
Returns a reference to a list of the default exclusion patterns.  If
onto by
Perl::Critic::PolicyParameter.  there
are no default exclusion patterns, then the list will be empty.
.ie n .IP """ force() """ 4
.el .IP "\f(CW force() \fR" 4
.IX Item " force() "
Returns the default value of the \f(CW\*(C`force\*(C'\fR flag (Either 1 or 0).
.ie n .IP """ include() """ 4
.el .IP "\f(CW include() \fR" 4
.IX Item " include() "
Returns a reference to a list of the default inclusion patterns.  If
there are no default exclusion patterns, then the list will be empty.
.ie n .IP """ only() """ 4
.el .IP "\f(CW only() \fR" 4
.IX Item " only() "
Returns the default value of the \f(CW\*(C`only\*(C'\fR flag (Either 1 or 0).
.ie n .IP """ profile_strictness() """ 4
.el .IP "\f(CW profile_strictness() \fR" 4
.IX Item " profile_strictness() "
Returns the default value of \f(CW\*(C`profile_strictness\*(C'\fR as an unvalidated
string.
.ie n .IP """ single_policy() """ 4
.el .IP "\f(CW single_policy() \fR" 4
.IX Item " single_policy() "
Returns the default \f(CW\*(C`single\-policy\*(C'\fR pattern.  (As a string.)
.ie n .IP """ severity() """ 4
.el .IP "\f(CW severity() \fR" 4
.IX Item " severity() "
Returns the default \f(CW\*(C`severity\*(C'\fR setting. (1..5).
.ie n .IP """ theme() """ 4
.el .IP "\f(CW theme() \fR" 4
.IX Item " theme() "
Returns the default \f(CW\*(C`theme\*(C'\fR setting. (As a string).
.ie n .IP """ top() """ 4
.el .IP "\f(CW top() \fR" 4
.IX Item " top() "
Returns the default \f(CW\*(C`top\*(C'\fR setting. (Either 0 or a positive integer).
.ie n .IP """ verbose() """ 4
.el .IP "\f(CW verbose() \fR" 4
.IX Item " verbose() "
Returns the default \f(CW\*(C`verbose\*(C'\fR setting. (Either a number or format
string).
.ie n .IP """ color() """ 4
.el .IP "\f(CW color() \fR" 4
.IX Item " color() "
Returns the default \f(CW\*(C`color\*(C'\fR setting. (Either 1 or 0).
.ie n .IP """ pager() """ 4
.el .IP "\f(CW pager() \fR" 4
.IX Item " pager() "
Returns the default \f(CW\*(C`pager\*(C'\fR setting. (Either empty string or the pager
command string).
.ie n .IP """ allow_unsafe() """ 4
.el .IP "\f(CW allow_unsafe() \fR" 4
.IX Item " allow_unsafe() "
Returns the default \f(CW\*(C`allow\-unsafe\*(C'\fR setting. (Either 1 or 0).
.ie n .IP """ criticism_fatal() """ 4
.el .IP "\f(CW criticism_fatal() \fR" 4
.IX Item " criticism_fatal() "
Returns the default \f(CW\*(C`criticism\-fatal\*(C'\fR setting (Either 1 or 0).
.ie n .IP """ color_severity_highest() """ 4
.el .IP "\f(CW color_severity_highest() \fR" 4
.IX Item " color_severity_highest() "
Returns the color to be used for coloring highest severity violations.
.ie n .IP """ color_severity_high() """ 4
.el .IP "\f(CW color_severity_high() \fR" 4
.IX Item " color_severity_high() "
Returns the color to be used for coloring high severity violations.
.ie n .IP """ color_severity_medium() """ 4
.el .IP "\f(CW color_severity_medium() \fR" 4
.IX Item " color_severity_medium() "
Returns the color to be used for coloring medium severity violations.
.ie n .IP """ color_severity_low() """ 4
.el .IP "\f(CW color_severity_low() \fR" 4
.IX Item " color_severity_low() "
Returns the color to be used for coloring low severity violations.
.ie n .IP """ color_severity_lowest() """ 4
.el .IP "\f(CW color_severity_lowest() \fR" 4
.IX Item " color_severity_lowest() "
Returns the color to be used for coloring lowest severity violations.
.ie n .IP """ program_extensions() """ 4
.el .IP "\f(CW program_extensions() \fR" 4
.IX Item " program_extensions() "
Returns a reference to the array of file name extensions to be interpreted as
representing Perl programs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Perl::Critic::Config,
Perl::Critic::UserProfile
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeffrey Ryan Thalhammer <jeff@imaginative\-software.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005\-2011 Imaginative Software Systems.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
