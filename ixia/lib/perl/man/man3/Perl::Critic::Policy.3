.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Policy 3"
.TH Perl::Critic::Policy 3 "2013-09-20" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Policy \- Base class for all Policy modules.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl::Critic::Policy is the abstract base class for all Policy
objects.  If you're developing your own Policies, your job is to
implement and override its methods in a subclass.  To work with the
Perl::Critic engine, your implementation must behave
as described below.  For a detailed explanation on how to make new
Policy modules, please see the
Perl::Critic::DEVELOPER document included
in this distribution.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a public class.  Any changes to its interface
will go through a deprecation cycle.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new( ... )""" 4
.el .IP "\f(CWnew( ... )\fR" 4
.IX Item "new( ... )"
Don't call this.  As a Policy author, do not implement this.  Use the
\&\f(CW\*(C`initialize_if_enabled()\*(C'\fR method for your Policy setup.  See the
developer documentation for more.
.ie n .IP """initialize_if_enabled( $config )""" 4
.el .IP "\f(CWinitialize_if_enabled( $config )\fR" 4
.IX Item "initialize_if_enabled( $config )"
This receives an instance of
Perl::Critic::PolicyConfig as a
parameter, and is only invoked if this Policy is enabled by the user.
Thus, this is the preferred place for subclasses to do any
initialization.
.Sp
Implementations of this method should return a boolean value
indicating whether the Policy should continue to be enabled.  For most
subclasses, this will always be \f(CW$TRUE\fR.  Policies that depend upon
external modules or other system facilities that may or may not be
available should test for the availability of these dependencies and
return \f(CW$FALSE\fR if they are not.
.ie n .IP """prepare_to_scan_document( $document )""" 4
.el .IP "\f(CWprepare_to_scan_document( $document )\fR" 4
.IX Item "prepare_to_scan_document( $document )"
The parameter is about to be scanned by this Policy.  Whatever this
Policy wants to do in terms of preparation should happen here.
Returns a boolean value indicating whether the document should be
scanned at all; if this is a false value, this Policy won't be applied
to the document.  By default, does nothing but return \f(CW$TRUE\fR.
.ie n .IP """ violates( $element, $document ) """ 4
.el .IP "\f(CW violates( $element, $document ) \fR" 4
.IX Item " violates( $element, $document ) "
Given a PPI::Element and a
PPI::Document, returns one or more
Perl::Critic::Violation objects if the
\&\f(CW$element\fR violates this Policy.  If there are no violations, then it
returns an empty list.  If the Policy encounters an exception, then it
should \f(CW\*(C`croak\*(C'\fR with an error message and let the caller decide how to
handle it.
.Sp
\&\f(CW\*(C`violates()\*(C'\fR is an abstract method and it will abort if you attempt
to invoke it directly.  It is the heart of all Policy modules, and
your subclass \fBmust\fR override this method.
.ie n .IP """ violation( $description, $explanation, $element ) """ 4
.el .IP "\f(CW violation( $description, $explanation, $element ) \fR" 4
.IX Item " violation( $description, $explanation, $element ) "
Returns a reference to a new \f(CW\*(C`Perl::Critic::Violation\*(C'\fR object. The
arguments are a description of the violation (as string), an
explanation for the policy (as string) or a series of page numbers in
\&\s-1PBP \s0(as an \s-1ARRAY\s0 ref), a reference to the \s-1PPI\s0 element that
caused the violation.
.Sp
These are the same as the constructor to
Perl::Critic::Violation, but without the
severity.  The Policy itself knows the severity.
.ie n .IP """ new_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) """ 4
.el .IP "\f(CW new_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) \fR" 4
.IX Item " new_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) "
Create a
Perl::Critic::Exception::Configuration::Option::Policy::ParameterValue
for this Policy.
.ie n .IP """ throw_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) """ 4
.el .IP "\f(CW throw_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) \fR" 4
.IX Item " throw_parameter_value_exception( $option_name, $option_value, $source, $message_suffix ) "
Create and throw a
Perl::Critic::Exception::Configuration::Option::Policy::ParameterValue.
Useful in parameter parser implementations.
.ie n .IP """ get_long_name() """ 4
.el .IP "\f(CW get_long_name() \fR" 4
.IX Item " get_long_name() "
Return the full package name of this policy.
.ie n .IP """ get_short_name() """ 4
.el .IP "\f(CW get_short_name() \fR" 4
.IX Item " get_short_name() "
Return the name of this policy without the \*(L"Perl::Critic::Policy::\*(R"
prefix.
.ie n .IP """ is_enabled() """ 4
.el .IP "\f(CW is_enabled() \fR" 4
.IX Item " is_enabled() "
Answer whether this policy is really active or not.  Returns a true
value if it is, a false, yet defined, value if it isn't, and an
undefined value if it hasn't yet been decided whether it will be.
.ie n .IP """ applies_to() """ 4
.el .IP "\f(CW applies_to() \fR" 4
.IX Item " applies_to() "
Returns a list of the names of \s-1PPI\s0 classes that this Policy cares
about.  By default, the result is \f(CW\*(C`PPI::Element\*(C'\fR.  Overriding this
method in Policy subclasses should lead to significant performance
increases.
.ie n .IP """ default_maximum_violations_per_document() """ 4
.el .IP "\f(CW default_maximum_violations_per_document() \fR" 4
.IX Item " default_maximum_violations_per_document() "
Returns the default maximum number of violations for this policy to
report per document.  By default, this not defined, but subclasses may
override this.
.ie n .IP """ get_maximum_violations_per_document() """ 4
.el .IP "\f(CW get_maximum_violations_per_document() \fR" 4
.IX Item " get_maximum_violations_per_document() "
Returns the maximum number of violations this policy will report for a
single document.  If this is not defined, then there is no limit.  If
\&\*(L"\fIset_maximum_violations_per_document()\fR\*(R" has not been invoked, then
\&\*(L"\fIdefault_maximum_violations_per_document()\fR\*(R" is returned.
.ie n .IP """ set_maximum_violations_per_document() """ 4
.el .IP "\f(CW set_maximum_violations_per_document() \fR" 4
.IX Item " set_maximum_violations_per_document() "
Specify the maximum violations that this policy should report for a
document.
.ie n .IP """ default_severity() """ 4
.el .IP "\f(CW default_severity() \fR" 4
.IX Item " default_severity() "
Returns the default severity for violating this Policy.  See the
\&\f(CW$SEVERITY\fR constants in Perl::Critic::Utils
for an enumeration of possible severity values.  By default, this
method returns \f(CW$SEVERITY_LOWEST\fR.  Authors of Perl::Critic::Policy
subclasses should override this method to return a value that they
feel is appropriate for their Policy.  In general, Polices that are
widely accepted or tend to prevent bugs should have a higher severity
than those that are more subjective or cosmetic in nature.
.ie n .IP """ get_severity() """ 4
.el .IP "\f(CW get_severity() \fR" 4
.IX Item " get_severity() "
Returns the severity of violating this Policy.  If the severity has
not been explicitly defined by calling \f(CW\*(C`set_severity\*(C'\fR, then the
\&\f(CW\*(C`default_severity\*(C'\fR is returned.  See the \f(CW$SEVERITY\fR constants in
Perl::Critic::Utils for an enumeration of
possible severity values.
.ie n .IP """ set_severity( $N ) """ 4
.el .IP "\f(CW set_severity( $N ) \fR" 4
.IX Item " set_severity( $N ) "
Sets the severity for violating this Policy.  Clients of
Perl::Critic::Policy objects can call this method to assign a
different severity to the Policy if they don't agree with the
\&\f(CW\*(C`default_severity\*(C'\fR.  See the \f(CW$SEVERITY\fR constants in
Perl::Critic::Utils for an enumeration of
possible values.
.ie n .IP """ default_themes() """ 4
.el .IP "\f(CW default_themes() \fR" 4
.IX Item " default_themes() "
Returns a sorted list of the default themes associated with this
Policy.  The default method returns an empty list.  Policy authors
should override this method to return a list of themes that are
appropriate for their policy.
.ie n .IP """ get_themes() """ 4
.el .IP "\f(CW get_themes() \fR" 4
.IX Item " get_themes() "
Returns a sorted list of the themes associated with this Policy.  If
you haven't added themes or set the themes explicitly, this method
just returns the default themes.
.ie n .IP """ set_themes( @THEME_LIST ) """ 4
.el .IP "\f(CW set_themes( @THEME_LIST ) \fR" 4
.IX Item " set_themes( @THEME_LIST ) "
Sets the themes associated with this Policy.  Any existing themes are
overwritten.  Duplicate themes will be removed.
.ie n .IP """ add_themes( @THEME_LIST ) """ 4
.el .IP "\f(CW add_themes( @THEME_LIST ) \fR" 4
.IX Item " add_themes( @THEME_LIST ) "
Appends additional themes to this Policy.  Any existing themes are
preserved.  Duplicate themes will be removed.
.ie n .IP """ get_abstract() """ 4
.el .IP "\f(CW get_abstract() \fR" 4
.IX Item " get_abstract() "
Retrieve the abstract for this policy (the part of the \s-1NAME\s0 section of
the \s-1POD\s0 after the module name), if it is available.
.ie n .IP """ get_raw_abstract() """ 4
.el .IP "\f(CW get_raw_abstract() \fR" 4
.IX Item " get_raw_abstract() "
Retrieve the abstract for this policy (the part of the \s-1NAME\s0 section of
the \s-1POD\s0 after the module name), if it is available, in the unparsed
form.
.ie n .IP """ parameter_metadata_available() """ 4
.el .IP "\f(CW parameter_metadata_available() \fR" 4
.IX Item " parameter_metadata_available() "
Returns whether information about the parameters is available.
.ie n .IP """ get_parameters() """ 4
.el .IP "\f(CW get_parameters() \fR" 4
.IX Item " get_parameters() "
Returns a reference to an array containing instances of
Perl::Critic::PolicyParameter.
.Sp
Note that this will return an empty list if the parameters for this
policy are unknown.  In order to differentiate between this
circumstance and the one where this policy does not take any
parameters, it is necessary to call \f(CW\*(C`parameter_metadata_available()\*(C'\fR.
.ie n .IP """set_format( $format )""" 4
.el .IP "\f(CWset_format( $format )\fR" 4
.IX Item "set_format( $format )"
Class method.  Sets the format for all Policy objects when they are
evaluated in string context.  The default is \f(CW"%p\en"\fR.  See
\&\*(L"\s-1OVERLOADS\*(R"\s0 for formatting options.
.ie n .IP """get_format()""" 4
.el .IP "\f(CWget_format()\fR" 4
.IX Item "get_format()"
Class method. Returns the current format for all Policy objects when
they are evaluated in string context.
.ie n .IP """to_string()""" 4
.el .IP "\f(CWto_string()\fR" 4
.IX Item "to_string()"
Returns a string representation of the policy.  The content of the
string depends on the current value returned by \f(CW\*(C`get_format()\*(C'\fR.
See \*(L"\s-1OVERLOADS\*(R"\s0 for the details.
.ie n .IP """is_safe()""" 4
.el .IP "\f(CWis_safe()\fR" 4
.IX Item "is_safe()"
Answer whether this Policy can be used to analyze untrusted code, i.e. the
Policy doesn't have any potential side effects.
.Sp
This method returns a true value by default.
.Sp
An \*(L"unsafe\*(R" policy might attempt to compile the code, which, if you have
\&\f(CW\*(C`BEGIN\*(C'\fR or \f(CW\*(C`CHECK\*(C'\fR blocks that affect files or connect to databases, is not
a safe thing to do.  If you are writing a such a Policy, then you should
override this method to return false.
.Sp
By default Perl::Critic will not run unsafe policies.
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
When your Policy module first \f(CW\*(C`use\*(C'\fRs
Perl::Critic::Violation, it will try and
extract the \s-1DESCRIPTION\s0 section of your Policy module's \s-1POD. \s0 This
information is displayed by Perl::Critic if the verbosity level is set
accordingly.  Therefore, please include a \s-1DESCRIPTION\s0 section in the
\&\s-1POD\s0 for any Policy modules that you author.  Thanks.
.SH "OVERLOADS"
.IX Header "OVERLOADS"
Perl::Critic::Violation overloads the \f(CW""\fR operator to produce neat
little messages when evaluated in string context.
.PP
Formats are a combination of literal and escape characters similar to
the way \f(CW\*(C`sprintf\*(C'\fR works.  If you want to know the specific formatting
capabilities, look at String::Format. Valid escape
characters are:
.ie n .IP "%P" 4
.el .IP "\f(CW%P\fR" 4
.IX Item "%P"
Name of the Policy module.
.ie n .IP "%p" 4
.el .IP "\f(CW%p\fR" 4
.IX Item "%p"
Name of the Policy without the \f(CW\*(C`Perl::Critic::Policy::\*(C'\fR prefix.
.ie n .IP "%a" 4
.el .IP "\f(CW%a\fR" 4
.IX Item "%a"
The policy abstract.
.ie n .IP "%O" 4
.el .IP "\f(CW%O\fR" 4
.IX Item "%O"
List of supported policy parameters.  Takes an option of a format
string for \*(L"to_formatted_string\*(R" in Perl::Critic::PolicyParameter.
For example, this can be used like \f(CW\*(C`%{%n \- %d\en}O\*(C'\fR to get a list of
parameter names followed by their descriptions.
.ie n .IP "%U" 4
.el .IP "\f(CW%U\fR" 4
.IX Item "%U"
A message stating that the parameters for the policy are unknown if
\&\f(CW\*(C`parameter_metadata_available()\*(C'\fR returns false.  Takes an option of
what the message should be, which defaults to \*(L"Cannot programmatically
discover what parameters this policy takes.\*(R".  The value of this
option is interpolated in order to expand the standard escape
sequences (\f(CW\*(C`\en\*(C'\fR, \f(CW\*(C`\et\*(C'\fR, etc.).
.ie n .IP "%S" 4
.el .IP "\f(CW%S\fR" 4
.IX Item "%S"
The default severity level of the policy.
.ie n .IP "%s" 4
.el .IP "\f(CW%s\fR" 4
.IX Item "%s"
The current severity level of the policy.
.ie n .IP "%T" 4
.el .IP "\f(CW%T\fR" 4
.IX Item "%T"
The default themes for the policy.
.ie n .IP "%t" 4
.el .IP "\f(CW%t\fR" 4
.IX Item "%t"
The current themes for the policy.
.ie n .IP "%V" 4
.el .IP "\f(CW%V\fR" 4
.IX Item "%V"
The default maximum number of violations per document of the policy.
.ie n .IP "%v" 4
.el .IP "\f(CW%v\fR" 4
.IX Item "%v"
The current maximum number of violations per document of the policy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeffrey Ryan Thalhammer <jeff@imaginative\-software.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005\-2011 Imaginative Software Systems.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
