# -*- coding: robot -*-
| *Setting* | *Value *|
| Documentation | Configure FSW via a telnet Console, then configure device with dynamic data file |
| Default Tags | Traffic-FSW |
| Resource | ${autopath}/cfg/${testbed}/duts.txt |
| Resource | ${autopath}/lib/fsw/telnet.txt |
| Resource | ${autopath}/lib/fsw/util.txt |
| Library  | ${autopath}/lib/trafgen/ixia_lib.py |
| Test Timeout | 20 minutes |

| *Variables*  | *Value* |
| ${dut_name} | ${${dut_id}.name} |
| ${dut_username} | ${${dut_id}.username} |
| ${dut_password} | ${${dut_id}.password} |
| ${dut_termip} | ${${dut_id}.termip} |
| ${dut_termport} | ${${dut_id}.termport} |
| ${config_data} | "config system global\nend" |
| ${telnet_alias} | 'telnetconsole' |
| ${show} | "no" |

| *Test Cases*  | *Value* | *Value* | *Value* |
| Test FSW with Trafgen IXIA | 
| | [Documentation] | Test FSW with Trafgen IXIA |
| | Show Test Related Variables |
| | ${config_data}= | Get File | ${autopath}/cfg/${testbed}/${configFile} |
| | Should Not Be Empty | ${config_data} | "cfg_info.txt cannot be empty" |

| | ${dut_prompt}= | Telnet Login | ${dut_termip} | ${telnet_alias} | ${dut_username} | ${dut_password} | 10 | ${dut_name} | ${dut_termport} | open=open | send_ctrlc=yes |
| | ${ret}= | Get Lines Containing String | ${dut_prompt} | ${dut_name} |
| | Should Match Regexp | ${ret} | ${dut_name} | "Telnet Login to ${dut_termip} failed" |
| | Configure FortiSwitch | ${config_data} |
| | Sleep | 2 |
| | Run Keyword If | "${show}" == "yes" | Show Switch | ${dut_name} | ${telnet_alias} |

| | ${Ixia Connect Stats}= | Ixia Connect | tcl_server=${tcl_server} | device=${device} | ixnetwork_tcl_server=${ixnetwork_tcl_server} | port_list=${port_list} | reset=1 |
| | ${status}= | Get From Dictionary | ${Ixia Connect Stats} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${ixia_ports}= | Get From Dictionary | ${Ixia Connect Stats} | vport_list |
| | ${ixia_tx} | ${ixia_rx} | Split String | ${ixia_ports} |

| | ${Topology Config Result}= | Ixia Topology Config | topology_name='topology 1' | port_handle=${ixia_tx} |
| | ${status} | Get From Dictionary | ${Topology Config Result} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${Topology 1 Handle} | Get From Dictionary | ${Topology Config Result} | topology_handle |
| | ${DeviceGroup Config Result} | Ixia Devicegrp Config | topology_handle=${Topology 1 Handle} | device_group_name='group 1' | device_group_multiplier=100 | device_group_enabled=1 |
| | ${status} | Get From Dictionary | ${DeviceGroup Config Result} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${DeviceGroup 1 Handle} | Get From Dictionary | ${DeviceGroup Config Result} | device_group_handle |

| | ${Topology Config Result} | Ixia Topology Config | topology_name='topology 2' | port_handle=${ixia_rx} |
| | ${status} | Get From Dictionary | ${Topology Config Result} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${Topology 2 Handle} | Get From Dictionary | ${Topology Config Result} | topology_handle |
| | ${DeviceGroup Config Result} | Ixia Devicegrp Config | topology_handle=${Topology 2 Handle} | device_group_name='group 2' | device_group_multiplier=100 | device_group_enabled=1 |
| | ${status} | Get From Dictionary | ${DeviceGroup Config Result} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${DeviceGroup 2 Handle} | Get From Dictionary | ${DeviceGroup Config Result} | device_group_handle |

| | ${Ethernet 1 Status} | Ixia L2 Interface Config | protocol_name='Ethernet 1' | protocol_handle=${DeviceGroup 1 Handle} | mtu=1500 | src_mac_addr=00.11.01.00.00.01 | src_mac_addr_step=00.00.00.00.00.01 |
| | ${Ethernet 1 Handle} | Get From Dictionary | ${Ethernet 1 Status} | ethernet_handle |
| | ${Ethernet 2 Status} | Ixia L2 Interface Config | protocol_name='Ethernet 2' | protocol_handle=${DeviceGroup 2 Handle} | mtu=1500 | src_mac_addr=00.22.01.00.00.01 | src_mac_addr_step=00.00.00.00.00.01 |
| | ${Ethernet 2 Handle} | Get From Dictionary | ${Ethernet 2 Status} | ethernet_handle |

| | ${Ipv4 1 Status} | Ixia L3 Interface Config | protocol_name='IPv4 1' | protocol_handle=${Ethernet 1 Handle} | gateway=100.1.0.1 | gateway_step=0.0.1.0 | intf_ip_addr=100.1.0.100 | intf_ip_addr_step=0.0.1.0 | netmask=255.255.255.0 |
| | ${Ipv4 1 Handle} | Get From Dictionary | ${Ipv4 1 Status} | ipv4_handle |
| | ${Ipv4 2 Status} | Ixia L3 Interface Config | protocol_name='IPv4 2' | protocol_handle=${Ethernet 2 Handle} | gateway=100.1.0.100 | gateway_step=0.0.1.0 | intf_ip_addr=100.1.0.1 | intf_ip_addr_step=0.0.1.0 | netmask=255.255.255.0 |
| | ${Ipv4 2 Handle} | Get From Dictionary | ${Ipv4 2 Status} | ipv4_handle |

| | ${Arp Config Status} | Ixia Ipv4 Arp Config |
| | ${status} | Get From Dictionary | ${Arp Config Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${Ethernet Config Status} | Ixia Ethernet Config |
| | ${status} | Get From Dictionary | ${Ethernet Config Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${Start Protocols Status} | Ixia Start Protocols |
| | ${status} | Get From Dictionary | ${Start Protocols Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| | ${Send Arp Status} | Ixia Send Arp | protocol_handle=${Ipv4 1 Handle} |
| | ${status} | Get From Dictionary | ${Send Arp Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | ${Send Arp Status} | Ixia Send Arp | protocol_handle=${Ipv4 2 Handle} |
| | ${status} | Get From Dictionary | ${Send Arp Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| | ${Traffic Config Status} | Ixia Traffic Config | src_handle=${Topology 1 Handle} | dst_handle=${Topology 2 Handle} | name='Traffic_Item_1' | endpoint_type="ipv4" |
| | ${status} | Get From Dictionary | ${Traffic Config Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| | ${Start Traffic Status} | Ixia Start Traffic |
| | ${status} | Get From Dictionary | ${Start Traffic Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |
| | Sleep | 30 seconds |
| | ${Stop Traffic Status} | Ixia Stop Traffic |
| | ${status} | Get From Dictionary | ${Stop Traffic Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| | ${Stop Protocols Status} | Ixia Stop Protocols |
| | ${status} | Get From Dictionary | ${Stop Protocols Status} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| | ${Traffic Stats} | Ixia Traffic Stats | mode="traffic_item" |
| | ${Tx_pkgs} | Ixia Traffic Pkts | traffic_stats=${Traffic Stats} | port=tx |
| | ${Rx Pkgs} | Ixia Traffic Pkts | traffic_stats=${Traffic Stats} | port=rx |
| | Log To Console | \n\t${Tx_pkgs} |
| | Log To Console | \n\t${Rx_pkgs} |
| | Should Be Equal As Numbers | ${Tx_pkgs} | ${Rx Pkgs} | 'Traffic loss. Test failed' |

| | ${Ixia Disconnect Stats}= | Ixia Disconnect |
| | ${status} | Get From Dictionary | ${Ixia Disconnect Stats} | status |
| | Run Keyword If | ${status} != 1 | Return From Keyword |

| *Keywords* |
| Show Test Related Variables | [Documentation] | Show all variables using in this test, autopath and dut_id are passed via command line |
| | Log To Console | \n\tautopath=${autopath} |
| | Log To Console | \tdut_id=${dut_id} |
| | Log To Console | \tdut_name=${dut_name} |
| | Log To Console | \tdut_username=${dut_username} |
| | Log To Console | \tdut_password=${dut_password} |
| | Log To Console | \tdut_termip=${dut_termip} |
| | Log To Console | \tdut_termport=${dut_termport} |

| Configure FortiSwitch | [Arguments] | ${config_data} |
| | [Documentation] | Configure FortiSwitch |
| | @{config_data_list} | Split to lines | ${config_data} |
| | :FOR | ${line} | IN | @{config_data_list} |
| | | Telnet.Write | ${line} |
| | | Sleep | 1 |
| | | ${read_info}= | Telnet.Read |
| | | Log To Console | ${read_info}${line} |
