# -*- coding: robot -*-
| *Setting* | *Value *|
| Documentation | Configure FSW via a telnet Console, then configure device with dynamic data file |
| Default Tags | Test-Memmory-Leak |
| Resource | ${autopath}/lib/util/telnet.txt |
| Resource | ${autopath}/lib/os/util.txt |
| Resource | ${autopath}/lib/util/util.txt |
| Library  | ${autopath}/lib/trafgen/ixia_lib.py |
| Library  | ${autopath}/lib/util/util.py |
| Library  | ${autopath}/lib/util/tableparser.py |
| Test Timeout | 20 minutes |

| *Variables*  | *Value* |
| ${tbinfo} | ${autopath}/cfg/${testbed}/tbinfo.xml |
| ${virtual_topo} | ${EMPTY} |
| ${tbtopo} | ${autopath}/cfg/virtual_topos/${virtual_topo} |
| ${Configure File} | ${autopath}/cfg/${testbed}/${configFile} |
| ${Unconfigure File} | ${autopath}/cfg/${testbed}/${unconfigFile} |

| *Test Cases*  | *Value* | *Value* | *Value* |
| Configure Device With Variables | [Documentation] | Configure Device With Dynamic data file |

# Allocate Suite Test Resources |
| | Log To Console | \n\tAllocate Suite Test Resources |
| | ${Test Topo Status}= | Suite Test Init | ${testbed} | ${tbinfo} | ${tbtopo} |
| | ${Status}= | Get From Dictionary | ${Test Topo Status} | status |
| | Run Keyword If | ${Status} != 1 | Fail | 'Allocate Suite Test Resources fail' |
| | ${Dut Hostname} | Get Nested Diction | ${Test Topo Status} | test_topo.dev1.hostname |
| | ${Dut Username} | Get Nested Diction | ${Test Topo Status} | test_topo.dev1.login.username |
| | ${Dut Password} | Get Nested Diction | ${Test Topo Status} | test_topo.dev1.login.password |
| | ${Dut Console Ip} | Get Nested Diction | ${Test Topo Status} | test_topo.dev1.console.ip |
| | ${Dut Console Port} | Get Nested Diction | ${Test Topo Status} | test_topo.dev1.console.line |
| | ${Ixia IxNetwork Srv} | Get Nested Diction | ${Test Topo Status} | test_topo.trafgen1.ixnetwork_server_ip |
| | ${Ixia Chasis} | Get Nested Diction | ${Test Topo Status} | test_topo.trafgen1.chassis_ip |
| | ${Ixia Tcl Srv} | Get Nested Diction | ${Test Topo Status} | test_topo.trafgen1.tcl_server_ip |
| | ${link1_ports} | Get Nested Diction | ${Test Topo Status} | test_topo.connections.link1.link |
| | ${link2_ports} | Get Nested Diction | ${Test Topo Status} | test_topo.connections.link2.link |
| | ${link_ports} | Catenate | ${link1_ports} | ${link2_ports} |
| | ${dev_ports_dict} | Restruct Dev Ports | ${link_ports} |
| | ${Dut ports} | Get From Dictionary | ${dev_ports_dict} | dev1 |
| | ${Dut Port1} | ${Dut Port2} | Split String | ${Dut ports} |
| | ${Ixia ports} | Get From Dictionary | ${dev_ports_dict} | trafgen1 |
| | Show Test Related Variables |

# Get configure file
| | ${Configure Data}= | Get File | ${Configure File} |
| | Should Not Be Empty | ${Configure Data} | "${Configure File} cannot be empty" |
| | ${Configure Data Dict} | Create Dictionary | ${Dut Hostname} | ${Configure Data} |

# Get unconfigure file
| | ${Unconfigure Data}= | Get File | ${Unconfigure File} |
| | Should Not Be Empty | ${Unconfigure Data} | "${Unconfigure File} cannot be empty" |
| | ${Unconfigure Data Dict} | Create Dictionary | ${Dut Hostname} | ${Unconfigure Data} |

# Telnet to DUT
| | ${dut_prompt}= | Telnet Login | ${Dut Console Ip} | ${Dut Hostname} | ${Dut Username} | ${Dut Password} | 10 | ${Dut Hostname} | ${Dut Console Port} | open=open | send_ctrlc=yes |
| | ${ret}= | Get Lines Containing String | ${Dut Username} | ${Dut Username} |
| | Should Match Regexp | ${ret} | ${Dut Username} | "Telnet Login to ${Dut Console Ip} failed" |

# Loop and configure DUT
| | :FOR | ${Index} | IN RANGE | ${Loop_Count} |
| | | ${Output} | FortiSwitch Command | ${Dut Hostname} | get hardware memory \| grep MemFree: |
| | | Log | \n\t  ====== Loop Number=${Index}, MemFree: ${Output} ====== | console=yes |
| | | Configure FortiSwitch | ${Configure Data Dict} |
| | | Sleep | 2 seconds |

# Loop and unconfigure DUT
| | | Configure FortiSwitch | ${Unconfigure Data Dict} |
| | | Sleep | 2 seconds |

| | [Teardown] | Close All Connections |
| | Log To Console | LOG FILE=${LOG FILE} |

| *Keywords* |
| Show Test Related Variables | [Documentation] | Show all variables using in this test, autopath and dut_id are passed via command line |
| | Log To Console | \n\tautopath=${autopath} |
| | Log To Console | \ttestbed=${testbed} |
| | Log To Console | \ttbinfo=${tbinfo} |
| | Log To Console | \ttbtopo=${tbtopo} |
| | Log To Console | \tDut Hostname=${Dut Hostname} |
| | Log To Console | \tDut Username=${Dut Username} |
| | Log To Console | \tDut Password=${Dut Password} |
| | Log To Console | \tDut Console Ip=${Dut Console Ip} |
| | Log To Console | \tDut Console Port=${Dut Console Port} |
| | Log To Console | \tIxia IxNetwork Srv=${Ixia IxNetwork Srv} |
| | Log To Console | \tIxia Chasis=${Ixia Chasis} |
| | Log To Console | \tIxia Tcl Srv=${Ixia Tcl Srv} |
| | Log To Console | \tDut ports=${Dut ports}
| | Log To Console | \tIxia ports=${Ixia ports}
