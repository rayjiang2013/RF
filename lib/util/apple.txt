# -*- coding: robot -*-
| *Settings* |
| Documentation | Common files for Apple Mac/wireless client related commands and variables
| Library | String | 
| Library | Collections | 
| Library | OperatingSystem | 
| Library | SSHLibrary | 
| Library | ${autopath}/lib/util/util.py |
| Library | ${autopath}/lib/util/tableparser.py |

| *Variables* |

| *Keywords* |

# get Apple Mac ifconfig -a Adapter info via a ssh session.
| Apple Ifconfig Adapter Info | [Arguments] | ${handle} | ${Adapter Type} | ${Info Name} |
| | [Documentation] | Apple Get ipconfig /all info handle=${handle}, Adapter Type=${Adapter Type}, Info Name=${Info Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | SSHLibrary.Write | ipconfig /all |
| | Sleep | 1 |
| | ${read_info}= | SSHLibrary.Read |
| | Log To Console | ${read_info} |
| | SSHLibrary.Switch Connection | ${org_handle}
| | ${Adapter Data Dict}= | Get Adapter Data | ${read_info} | ${Adapter Type} |
| | ${Info Value List} | Get Nested Diction | ${Adapter Data Dict} | data.${Info Name} |
| | ${Info Value} | Get From List | ${Info Value List} | 0 |
| | Should Not Be Empty | ${Info Value} | 'Unable to get ${Info Name} from Adapter' |
| | [Return] | ${Info Value} |

# Verify if Wireless Client can ping FAP
| Apple Ping | [Arguments] | ${handle} | ${Destination IP} |
| | [Documentation] | Verify Wireless Client can ping FAP handle=${handle}, Destination IP=${Destination IP} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | :FOR | ${Loop Count} | IN RANGE | 1 | 10 |
| | | SSHLibrary.Write | ping ${Destination IP} |
| | | Sleep | 5 |
| | | ${read_info}= | SSHLibrary.Read |
| | | Log To Console | ${read_info} |
| | | ${Ping Status} | Verify FAP Ping Packets Loss | ${read_info} |
| | | ${Status} | Get From Dictionary | ${Ping Status} | status |
| | | Run Keyword If | ${Status} == 1 | Exit For Loop |
| | | Sleep | 10 |
| | SSHLibrary.Switch Connection | ${org_handle}
| | Should Be True | ${Loop Count} < 9 | 'Apple Client Ping ${Destination IP} fails' |

# Confirm SSID Presence 
| Apple Check SSID Presence | [Arguments] | ${handle} | ${SSID Name} |
| | [Documentation] | Apple Check SSID Presence handle=${handle}, SSID Name=${SSID Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | SSHLibrary.Write Until Expected Output | netsh\n | expected=netsh\> | timeout=5s | retry_interval=0.5s |
| | :FOR | ${Loop Count} | IN RANGE | 1 | 10 |
| | | Log | netsh\>wlan show networks | console=yes |
| | | SSHLibrary.Write | wlan show networks |
| | | Sleep | 2 |
| | | ${Info Data}= | SSHLibrary.Read |
| | | ${SSID Presence}= | Check SSID Presence | ${Info Data} | ${SSID Name} |
| | | ${Status} | Get From Dictionary | ${SSID Presence} | status |
| | | Run Keyword If | ${Status} == 1 | Exit For Loop |
| | | Sleep | 10 |
| | SSHLibrary.Write Until Expected Output | exit\n | expected=${handle} | timeout=5s | retry_interval=0.5s |
| | Should Be True | ${Loop Count} < 9 | 'Apple Check SSID Presence fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Get SSID Data
| Apple Get SSID Data | [Arguments] | ${handle} |
| | [Documentation] | Apple Get SSID Data handle=${handle} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | SSHLibrary.Write Until Expected Output | netsh\n | expected=netsh\> | timeout=5s | retry_interval=0.5s |
| | Log | netsh\>wlan show networks | console=yes |
| | SSHLibrary.Write | wlan show networks |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | SSHLibrary.Write Until Expected Output | exit\n | expected=${handle} | timeout=5s | retry_interval=0.5s |
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${SSID Data} | Get SSID Data | ${Info Data} |
| | ${Status} | Get From Dictionary | ${SSID Data} | status |
| | Run Keyword If | ${Status} != 1 | Fail | 'Apple Get SSID Data fails' |
| | [Return] | ${SSID Data} |

# Get Wlan Info
| Apple Get Wlan Info | [Arguments] | ${handle} | ${Info Key} |
| | [Documentation] | Apple Get Wlan Info handle=${handle}, Info Key=${Info Key} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | SSHLibrary.Write Until Expected Output | netsh\n | expected=netsh\> | timeout=5s | retry_interval=0.5s |
| | Log | netsh\>wlan show ${Info Key} | console=yes |
| | SSHLibrary.Write | wlan show ${Info Key} |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | SSHLibrary.Write Until Expected Output | exit\n | expected=${handle} | timeout=5s | retry_interval=0.5s |
| | SSHLibrary.Switch Connection | ${org_handle} |
| | [Return] | ${Info Data} |

# Get Wlan Interface Data
| Apple Get Wlan Interface Data | [Arguments] | ${handle} |
| | [Documentation] | Apple Get Wlan Interface Data handle=${handle} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan show interface | console=yes |
| | SSHLibrary.Write | netsh wlan show interface |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${Wlan Interface Data} | Parse Wlan Interface Data | ${Info Data} |
| | ${Status} | Get From Dictionary | ${Wlan Interface Data} | status |
| | Run Keyword If | ${Status} != 1 | Fail | 'Apple Get Wlan Interface Data fails' |
| | [Return] | ${Wlan Interface Data} |

# Add Wlan Profile to interface
| Apple Add Wlan Profile to Interface | [Arguments] | ${handle} | ${Wlan Profile} | ${Wlan Interface Name} |
| | [Documentation] | Apple Add Wlan Profile To Interface handle=${handle}, Wlan Profile=${Wlan Profile}, Wlan Interface Name=${Wlan Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan add profile filename=${Wlan Profile} interface="${Wlan Interface Name}" | console=yes |
| | SSHLibrary.Write | netsh wlan add profile filename=${Wlan Profile} interface="${Wlan Interface Name}" |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | is added on interface ${Wlan Interface Name} |
| | Should Not Be Empty | ${Match Lines} | 'Apple Add Wlan Profile to Interface ${Wlan Interface Name} fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Delete Wlan Profile from interface
| Apple Delete Wlan Profile From Interface | [Arguments] | ${handle} | ${Wlan Profile} | ${Wlan Interface Name} |
| | [Documentation] | Apple Delete Wlan Profile From Interface handle=${handle}, Wlan Profile=${Wlan Profile}, Wlan Interface Name=${Wlan Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan delete profile name=${Wlan Profile} interface="${Wlan Interface Name}" | console=yes |
| | SSHLibrary.Write | netsh wlan delete profile name=${Wlan Profile} interface="${Wlan Interface Name}" |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log | \n\tInfo Data=${Info Data} | console=yes |
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | is deleted from interface "${Wlan Interface Name}" |
| | Should Not Be Empty | ${Match Lines} | 'Apple Delete Wlan Profile to Interface ${Wlan Interface Name} fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Verify Wlan Profile in interface
| Apple Verify Wlan Profile in Interface | [Arguments] | ${handle} | ${Wlan Profile} | ${Wlan Interface Name} |
| | [Documentation] | Apple Add Wlan Profile To Interface handle=${handle}, Wlan Profile=${Wlan Profile}, Wlan Interface Name=${Wlan Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan show profile | console=yes |
| | SSHLibrary.Write | netsh wlan show profile |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\tInfo Data=${Info Data}
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | Profiles on interface ${Wlan Interface Name} |
| | Should Not Be Empty | ${Match Lines} | 'Apple Verify Wlan Profile in Interface ${Wlan Interface Name} fails' |
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | ${Wlan Profile} |
| | Should Not Be Empty | ${Match Lines} | 'Apple Verify Wlan Profile in Interface All User Profile ${Wlan Profile} fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Connect Wlan Profile To interface
| Apple Wlan Connect To SSID | [Arguments] | ${handle} | ${Wlan SSID} | ${Wlan Interface Name} |
| | [Documentation] | Apple Wlan Connect To SSID handle=${handle}, Wlan SSID=${Wlan SSID}, Wlan Interface Name=${Wlan Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan Connect ssid=${Wlan SSID} name=${Wlan SSID} interface="${Wlan Interface Name}" | console=yes |
| | SSHLibrary.Write | netsh wlan Connect ssid=${Wlan SSID} name=${Wlan SSID} interface="${Wlan Interface Name}" |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\tInfo Data=${Info Data}
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | Connection request was completed successfully |
| | Should Not Be Empty | ${Match Lines} | 'Apple Wlan Connect To SSID ${Wlan SSID} fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Disconnect Wlan Profile in interface
| Apple Wlan Disconnect From SSID | [Arguments] | ${handle} |
| | [Documentation] | Apple Wlan Disconnect To SSID handle=${handle} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} netsh wlan disconnect | console=yes |
| | SSHLibrary.Write | netsh wlan disconnect |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\tInfo Data=${Info Data}
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | Disconnection request was completed successfully |
| | Should Not Be Empty | ${Match Lines} | 'Apple Wlan Disconnect fails' |
| | SSHLibrary.Switch Connection | ${org_handle} |
