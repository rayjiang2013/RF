# -*- coding: robot -*-
| *Settings* |
| Documentation | Common files for Apple MacOsx wireless client related commands and variables
| Library | String | 
| Library | Collections | 
| Library | OperatingSystem | 
| Library | SSHLibrary | 
| Library | ${autopath}/lib/util/util.py |
| Library | ${autopath}/lib/util/tableparser.py |

| *Variables* |

| *Keywords* |

# Get macOs Mac Wifi info via a ssh session.
| macOs Get Wifi Info | [Arguments] | ${handle} | ${Default Gateway} |
| | [Documentation] | macOs Get Wifi Info handle=${handle}, Default Gateway=${Default Gateway} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | :FOR | ${Loop Count} | IN RANGE | 1 | 10 |
| | | Log | \n\t${handle} networksetup -getinfo Wi-Fi | console=yes |
| | | SSHLibrary.Write | networksetup -getinfo Wi-Fi |
| | | Sleep | 1 |
| | | ${read_info}= | SSHLibrary.Read |
| | | Log | \n\t${read_info} | console=yes |
| | | ${Wifi Info}= | Get Wifi Info | ${read_info} | ${Default Gateway} |
| | | ${Status} | Get From Dictionary | ${Wifi Info} | status |
| | | Run Keyword If | ${Status} == 1 | Exit For Loop |
| | | Sleep | 10 |
| | SSHLibrary.Switch Connection | ${org_handle}
| | Should Be True | ${Loop Count} < 9 | 'macOs Get Wifi Info ${handle} ${Default Gateway} fails' |
| | ${Wifi Data}= | Get From Dictionary | ${Wifi Info} | wifi |
| | [Return] | ${Wifi Data} |

# Get SSID Data
| macOs Check SSID Presence | [Arguments] | ${handle} | ${Wireless Hardware Port} | ${SSID Name} |
| | [Documentation] | macOs Check SSID Presence handle=${handle}, Wireless Hardware Port=${Wireless Hardware Port}, SSID Name=${SSID Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | \n\t${handle} networksetup -listpreferredwirelessnetworks ${Wireless Hardware Port} | console=yes |
| | SSHLibrary.Write | networksetup -listpreferredwirelessnetworks ${Wireless Hardware Port} |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data}
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${Match Lines} | Get Lines Containing String | ${Info Data} | ${SSID Name} |
| | Should Not Be Empty | ${Match Lines} | 'Unable find ${SSID Name} on Hardware Port ${Wireless Hardware Port}' |

# Get SSID Data
| macOs Get SSID Data | [Arguments] | ${handle} | ${SSID Name} |
| | [Documentation] | macOs Get SSID Data handle=${handle}, SSID Name=${SSID Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | \n\t${handle} /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan | console=yes |
| | SSHLibrary.Write | /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan |
| | Sleep | 5 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data}
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${Header} | Set Variable | SSID BSSID RSSI CHANNEL HT CC SECURITY |
| | ${Parse Info} | Create Dictionary | table | ${Info Data} | header | ${Header} |
| | ${Parsed Dict} | TableParserInPosition | ${Parse Info} |
| | ${Status} | Get From Dictionary | ${Parsed Dict} | status |
| | Run Keyword If | ${Status} != 1 | Fail | 'macOs Get SSID Data fails' |
| | ${SSID List} | Get Nested Diction | ${Parsed Dict} | data.SSID |
| | ${BSSID List} | Get Nested Diction | ${Parsed Dict} | data.BSSID |
| | ${RSSI List} | Get Nested Diction | ${Parsed Dict} | data.RSSI |
| | ${CHANNEL List} | Get Nested Diction | ${Parsed Dict} | data.CHANNEL |
| | ${HT List} | Get Nested Diction | ${Parsed Dict} | data.HT |
| | ${CC List} | Get Nested Diction | ${Parsed Dict} | data.CC |
| | ${SECURITY List} | Get Nested Diction | ${Parsed Dict} | data.SECURITY |
| | ${SSID Subname} | Get Substring | ${SSID Name} | -4 |
| | ${SSID Index} | Get Index From List | ${SSID List} | ${SSID Subname} |
| | ${SSID Value} | Get From List | ${SSID List} | ${SSID Index} |
| | ${BSSID Value} | Get From List | ${BSSID List} | ${SSID Index} |
| | ${RSSI Value} | Get From List | ${RSSI List} | ${SSID Index} |
| | ${CHANNEL Value} | Get From List | ${CHANNEL List} | ${SSID Index} |
| | ${HT Value} | Get From List | ${HT List} | ${SSID Index} |
| | ${CC Value} | Get From List | ${CC List} | ${SSID Index} |
| | ${SECURITY Value} | Get From List | ${SECURITY List} | ${SSID Index} |
| | ${SSID Info} | Create Dictionary | SSID | ${SSID Value} | BSSID | ${RSSI Value} | CHANNEL | ${CHANNEL Value} | HT | ${HT Value} | CC | ${CC Value} | SECURITY | ${SECURITY Value} |
| | [Return] | ${SSID Info} |

# Verify if Wireless Client can ping FAP
| macOs Ping | [Arguments] | ${handle} | ${Destination IP} |
| | [Documentation] | macOs Ping handle=${handle}, Destination IP=${Destination IP} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | :FOR | ${Loop Count} | IN RANGE | 1 | 10 |
| | | SSHLibrary.Write | ping -c 1 ${Destination IP} |
| | | Sleep | 5 |
| | | ${read_info}= | SSHLibrary.Read |
| | | Log To Console | ${read_info} |
| | | ${Ping Status} | Verify Ping Packets Loss | ${read_info} |
| | | ${Status} | Get From Dictionary | ${Ping Status} | status |
| | | Run Keyword If | ${Status} == 1 | Exit For Loop |
| | | Sleep | 10 |
| | SSHLibrary.Switch Connection | ${org_handle}
| | Should Be True | ${Loop Count} < 9 | 'macOs Ping ${Destination IP} fails' |

# Connect To SSID
| macOs Connect To SSID | [Arguments] | ${handle} | ${SSID Name} | ${Interface Name} | ${Password}='' |
| | [Documentation] | macOs Connect To SSID handle=${handle}, SSID Name=${SSID Name}, Interface Name=${Interface Name}, Password=${Password} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | :FOR | ${Loop Count} | IN RANGE | 1 | 10 |
| | | Log | ${handle} networksetup -setairportnetwork ${Interface Name} ${SSID Name} ${Password} | console=yes |
| | | SSHLibrary.Write | networksetup -setairportnetwork ${Interface Name} ${SSID Name} ${Password} |
| | | Sleep | 1 |
| | | ${Info Data}= | SSHLibrary.Read |
| | | Log To Console | \n\t${Info Data}
| | | ${Match Lines} | Get Lines Containing String | ${Info Data} | Unable to commit systemconfig database |
| | | Run Keyword If | '${Match Lines}' == '${EMPTY}' | Exit For Loop |
| | | Sleep | 10 |
| | SSHLibrary.Switch Connection | ${org_handle} |
| | Should Be True | ${Loop Count} < 9 | 'macOs Connect To SSID  ${SSID Name} ${Interface Name} ${Password} fails' |

# Trun Off Wifi
| macOs Trun Off Wifi | [Arguments] | ${handle} | ${Interface Name} |
| | [Documentation] | macOs Trun Off Wifi handle=${handle}, Interface Name=${Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} networksetup -setairportpower ${Interface Name} off | console=yes |
| | SSHLibrary.Write | networksetup -setairportpower ${Interface Name} off |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data}
| | SSHLibrary.Switch Connection | ${org_handle} |

# Trun On Wifi
| macOs Trun On Wifi | [Arguments] | ${handle} | ${Interface Name} |
| | [Documentation] | macOs Trun On Wifi handle=${handle}, Interface Name=${Interface Name} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} networksetup -setairportpower ${Interface Name} on | console=yes |
| | SSHLibrary.Write | networksetup -setairportpower ${Interface Name} on |
| | Sleep | 1 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data}
| | SSHLibrary.Switch Connection | ${org_handle} |

# Get Wifi Network Interface Name
| macOs Get Wifi Network Interface Name | [Arguments] | ${handle} |
| | [Documentation] | macOs Get Wifi Network Interface Name handle=${handle} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} networksetup -setairportpower -listallhardwareports |
| | SSHLibrary.Write | networksetup -listallhardwareports |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data}
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${Wifi Network Interface Info} | Get Wifi Interface Info | ${Info Data} |
| | ${Status} | Get From Dictionary | ${Wifi Network Interface Info} | status |
| | Run Keyword If | ${Status} != 1 | 'macOs Get Wifi Network Interface Name ${handle} fails'' |
| | ${Wifi Network Interface Data}= | Get From Dictionary | ${Wifi Network Interface Info} | wifi |
| | [Return] | ${Wifi Network Interface Data} |

# Configure Wireless Network
| macOs Configure Wireless Network | [Arguments] | ${handle} | ${Hardwareport} | ${Network} | ${Securitytype} | ${index}=0 | ${Password}=OPEN |
| | [Documentation] | macOs Configure Wireless Network handle=${handle}, Hardwareport=${Hardwareport}, Network=${Network}, Securitytype=${Securitytype}, index=${index}, Password=$Password} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} networksetup -addpreferredwirelessnetworkatindex ${Hardwareport} ${Network} ${index}=0 ${Securitytype}  ${Password} |
| | SSHLibrary.Write | networksetup -addpreferredwirelessnetworkatindex ${Hardwareport} ${Network} ${index}=0 ${Securitytype} ${Password} |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data} |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Remove Wireless Network
| macOs Remove Wireless Network | [Arguments] | ${handle} | ${Hardwareport} | ${Network} |
| | [Documentation] | macOs Configure Wireless Network handle=${handle}, Hardwareport=${Hardwareport}, Network=${Network} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} networksetup -removepreferredwirelessnetwork ${Hardwareport} ${Network} |
| | SSHLibrary.Write | networksetup -addpreferredwirelessnetworkatindex ${Hardwareport} ${Network} |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data} |
| | SSHLibrary.Switch Connection | ${org_handle} |

# Get Wireless Network attributes
| macOs Get Wireless Network Attributes | [Arguments] | ${handle} |
| | [Documentation] | macOs Get Wireless Network Attributes handle=${handle} |
| | ${org_handle} | SSHLibrary.Switch Connection | ${handle} |
| | Log | ${handle} airport -I |
| | SSHLibrary.Write | airport -I |
| | Sleep | 2 |
| | ${Info Data}= | SSHLibrary.Read |
| | Log To Console | \n\t${Info Data} |
| | SSHLibrary.Switch Connection | ${org_handle} |
| | ${Wireless Network Attributes} | Parse Wireless Network Attributes | ${Info Data} |
| | ${Status} | Get From Dictionary | ${Wireless Network Attributes} | status |
| | Run Keyword If | ${Status} != 1 | 'macOs Get Wireless Network Attributes ${handle} fails'' |
| | ${Wireless Network Attributes Data}= | Get From Dictionary | ${Wireless Network Attributes} | data |
| | [Return] | ${Wireless Network Attributes Data} |
