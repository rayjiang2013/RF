<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="HL_API_Help.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="High Level API Basics|About HLTAPI">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" /><title>A Script Example</title>
        <link href="../../Resources/Stylesheets/Advanced_Information_Manager.css" rel="stylesheet" type="text/css" />
        <script src="../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../HL_API_Help.htm#HL_API/About_HLT/Script_Example.htm">Open topic with navigation</a>
        </p>
        <h4> <a name="A_script_example"></a>A script example </h4>
        <p>Here is a simple script example of setting up the connection to chassis, reserving ports, creating traffic, and getting statistics. At the end, a cleanup is called to reset and unlock the ports being used. </p>
        <p class="CodeBlock"># load HLTAPI library</p>
        <p class="CodeBlock">package require Ixia</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># some variables used in the script</p>
        <p class="CodeBlock">set ixia(device) 1.1.1.2</p>
        <p class="CodeBlock">set tx_port 4/1</p>
        <p class="CodeBlock">set rx_port 4/3</p>
        <p class="CodeBlock">set tx_mac 0000.0000.0001</p>
        <p class="CodeBlock">set rx_mac 0000.0000.0002</p>
        <p class="CodeBlock">set tx_ip 100.0.4.1</p>
        <p class="CodeBlock">set rx_ip 100.0.4.3</p>
        <p class="CodeBlock">set mask 255.255.255.0</p>
        <p class="CodeBlock">set rate_pps 2000</p>
        <p class="CodeBlock">set ip_size 256</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># call ixia::connect to connect to the chassis and reserve ports</p>
        <p class="CodeBlock">set connect_info [ixia::connect\</p>
        <p class="CodeBlock">-reset\</p>
        <p class="CodeBlock">-device $ixia(device)\</p>
        <p class="CodeBlock">-port_list $tx_port $rx_port\</p>
        <p class="CodeBlock">-username ciscoUser]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># checking whether connection process succeeds</p>
        <p class="CodeBlock">if { [keylget connect_info status] == $FAILURE } {</p>
        <p class="CodeBlock">puts "Failed to connect to $ixia(device): \</p>
        <p class="CodeBlock">[keylget connect_info log]"</p>
        <p class="CodeBlock">return</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># getting handles; they are the references used in subsequent calls</p>
        <p class="CodeBlock">set tx_handle [keylget connect_info port_handle.$ixia(device).$tx_port]</p>
        <p class="CodeBlock">set rx_handle [keylget connect_info port_handle.$ixia(device).$rx_port]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># configuring interfaces</p>
        <p class="CodeBlock">set interface_info [ixia::interface_config \</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle \</p>
        <p class="CodeBlock">-src_mac_addr $tx_mac $rx_mac \</p>
        <p class="CodeBlock">-intf_ip_addr $tx_ip $rx_ip \</p>
        <p class="CodeBlock">-netmask $mask $mask \</p>
        <p class="CodeBlock">-autonegotiation 0 ]</p>
        <p class="CodeBlock"># checking interface config</p>
        <p class="CodeBlock">if { [keylget interface_info status] == $FAILURE } {</p>
        <p class="CodeBlock">puts "Failed to configure interfaces: \</p>
        <p class="CodeBlock">[keylget interface_info log]"</p>
        <p class="CodeBlock">return</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># clean up all streams; note that ixia::traffic_config</p>
        <p class="CodeBlock"># accepts only one port handle at a time</p>
        <p class="CodeBlock">foreach phandle [list $tx_handle $rx_handle] {</p>
        <p class="CodeBlock">set traffic_info [ixia::traffic_config \</p>
        <p class="CodeBlock">-mode reset \</p>
        <p class="CodeBlock">-port_handle $phandle] </p>
        <p class="CodeBlock">if {[keylget traffic_info status] == $FAILURE} {</p>
        <p class="CodeBlock">puts "Failed to reset traffic streams: \</p>
        <p class="CodeBlock">[keylget traffic_info log]"</p>
        <p class="CodeBlock">return</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># setting up a traffic stream from tx port to rx port</p>
        <p class="CodeBlock">set stream_info [ixia::traffic_config\</p>
        <p class="CodeBlock">-mode create\</p>
        <p class="CodeBlock">-port_handle $tx_handle\</p>
        <p class="CodeBlock">-l3_protocol ipv4\</p>
        <p class="CodeBlock">-ip_src_addr $tx_ip\</p>
        <p class="CodeBlock">-ip_dst_addr $rx_ip\</p>
        <p class="CodeBlock">-l3_length $ip_size\</p>
        <p class="CodeBlock">-transmit_mode continuous\</p>
        <p class="CodeBlock">-mac_src $tx_mac\</p>
        <p class="CodeBlock">-mac_dst_mode discovery\          </p>
        <p class="CodeBlock">-rate_pps $rate_pps]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># checking stream creation</p>
        <p class="CodeBlock">if {[keylget stream_info status] == $FAILURE} {</p>
        <p class="CodeBlock">puts "Failed to create a traffic streams: \</p>
        <p class="CodeBlock">[keylget stream_info log]"</p>
        <p class="CodeBlock">return</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># obtain the stream ID for reference</p>
        <p class="CodeBlock">set streamID [keylget stream_info stream_id]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># clearing stats at both sides before running traffic</p>
        <p class="CodeBlock">set stats_info [ixia::traffic_control \</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle\</p>
        <p class="CodeBlock">-action clear_stats]</p>
        <p class="CodeBlock">if {[keylget stats_info status] != $SUCCESS} {</p>
        <p class="CodeBlock">return "Failed to clean stats: \</p>
        <p class="CodeBlock">[keylget stats_info log]"</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># start TX</p>
        <p class="CodeBlock">set run_info [ixia::traffic_control\</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle\</p>
        <p class="CodeBlock">-action run]</p>
        <p class="CodeBlock">if {[keylget run_info status] != $SUCCESS} {</p>
        <p class="CodeBlock">return "Failed to start TX: \</p>
        <p class="CodeBlock">[keylget run_info log]"</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># wait for 3 seconds as traffic running</p>
        <p class="CodeBlock">after 3000 </p>
        <p class="CodeBlock"># stop traffic</p>
        <p class="CodeBlock">set stop_info [ixia::traffic_control\</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle\</p>
        <p class="CodeBlock">-action stop]</p>
        <p class="CodeBlock">if {[keylget stop_info status] != $SUCCESS} {</p>
        <p class="CodeBlock">return "Failed to stop TX: \</p>
        <p class="CodeBlock">[keylget stop_info log]"</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># get stats</p>
        <p class="CodeBlock">set stats [ixia::traffic_stats\</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle \</p>
        <p class="CodeBlock">-mode streams]</p>
        <p class="CodeBlock">if {[keylget stats status] == $FAILURE} {</p>
        <p class="CodeBlock">return "Failed to get stats:\</p>
        <p class="CodeBlock">[keylget stats log]"</p>
        <p class="CodeBlock">}</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># display stats for the stream</p>
        <p class="CodeBlock">set tx_pkts [keylget stats $tx_handle.stream.$streamID.tx.total_pkts]</p>
        <p class="CodeBlock">set rx_pkts [keylget stats $rx_handle.stream.$streamID.rx.total_pkts]</p>
        <p class="CodeBlock">set delay [keylget stats $rx_handle.stream.$streamID.rx.avg_delay]</p>
        <p class="CodeBlock">puts "Stream TX $tx_pkts; RX $rx_pkts; avg latency: $delay ns"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># clean up</p>
        <p class="CodeBlock">set cleanup_info [ixia::cleanup_session\</p>
        <p class="CodeBlock">-port_handle $tx_handle $rx_handle\</p>
        <p class="CodeBlock">-reset]</p>
        <p class="CodeBlock">if {[keylget cleanup_info status] == $FAILURE} {</p>
        <p class="CodeBlock">return "Failed to clean up:\</p>
        <p class="CodeBlock">[keylget cleanup_info log]"</p>
        <p class="CodeBlock">}</p>
        <p>The different phases of this script are as follows:</p>
        <ol>
            <li value="1">Load the HLTAPI library by using package require Ixia.</li>
            <li value="2">Connect to the chassis and reserve ports for use, and get the handles. Note that ports are referenced by handles in other HLTAPI calls.</li>
            <li value="3">Clear the streams on the ports.</li>
            <li value="4">Create traffic streams.</li>
            <li value="5">Clear statistics.</li>
            <li value="6">Start transmitting.</li>
            <li value="7">Stop transmitting.</li>
            <li value="8">Get statistics from the ports and process stats data.</li>
            <li value="9">Clean up and release the ports.</li>
        </ol>
        <p class="Note">For each HLTAPI call, there is error checking by looking at the status key in the returning keyed list. On success, this list holds pertinent information for different calls. For example, <span class="Code">
stream_id for traffic_config</span>
call, and statistical data for <span class="Code">
traffic_stats</span>
 call.</p>
    </body>
</html>