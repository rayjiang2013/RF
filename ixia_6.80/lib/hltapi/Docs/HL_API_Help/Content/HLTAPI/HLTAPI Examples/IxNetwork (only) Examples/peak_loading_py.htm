<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="HL_API_Help.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Appendix|IxNetwork (only) Examples|PYTHON_Samples">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" /><title>Peak Loading (peak_loading.py)</title>
        <link href="../../../Resources/Stylesheets/Advanced_Information_Manager.css" rel="stylesheet" type="text/css" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../HL_API_Help.htm#HLTAPI/HLTAPI Examples/IxNetwork (only) Examples/peak_loading_py.htm">Open topic with navigation</a>
        </p>
        <h1>Peak Loading(peak_loading.py)</h1>
        <p class="CodeBlock">################################################################################</p>
        <p class="CodeBlock">#                                                                              #</p>
        <p class="CodeBlock"># Description:                                                                 #</p>
        <p class="CodeBlock">#   This sample connects to an IxNetwork client and loads an ixncfg containing #</p>
        <p class="CodeBlock">#   traffic items. Using the retrieved information, it sets the global traffic #</p>
        <p class="CodeBlock">#   option called "Frame Ordering" to the new option "Peak Loading".           #</p>
        <p class="CodeBlock"># Module:                                                                      #</p>
        <p class="CodeBlock">#   The sample was tested on a LSM XMVDC16NG module.                           #</p>
        <p class="CodeBlock">#                                                                              #</p>
        <p class="CodeBlock">################################################################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">from pprint import pprint</p>
        <p class="CodeBlock">import os, sys</p>
        <p class="CodeBlock">import time</p>
        <p class="CodeBlock">import pdb</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock"># sys.path.append('/path/to/hltapi/library/common/ixiangpf/python')</p>
        <p class="CodeBlock"># sys.path.append('/path/to/ixnetwork/api/python')</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">from ixiatcl import IxiaTcl</p>
        <p class="CodeBlock">from ixiahlt import IxiaHlt</p>
        <p class="CodeBlock">from ixiangpf import IxiaNgpf</p>
        <p class="CodeBlock">from ixiaerror import IxiaError</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">ixiatcl = IxiaTcl()</p>
        <p class="CodeBlock">ixiahlt = IxiaHlt(ixiatcl)</p>
        <p class="CodeBlock">ixiangpf = IxiaNgpf(ixiahlt)</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">dirname, filename = os.path.split(os.path.abspath(__file__))</p>
        <p class="CodeBlock">print dirname</p>
        <p class="CodeBlock">print filename</p>
        <p class="CodeBlock">logname = dirname + '\\log.log'</p>
        <p class="CodeBlock">ixiahlt.ixiatcl.set_py('::ixia::debug', 3)</p>
        <p class="CodeBlock">ixiahlt.ixiatcl.set_py('::ixia::debug_file_name', logname)</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">chassis_ip = "ixro-hlt-xm2-01"</p>
        <p class="CodeBlock">tcl_server = "ixro-hlt-xm2-01"</p>
        <p class="CodeBlock">ixnetwork_tcl_server = 'localhost'</p>
        <p class="CodeBlock">port_list_str = "1/1 1/2 1/3 1/4"</p>
        <p class="CodeBlock">port_list = port_list_str.split()</p>
        <p class="CodeBlock">cfgErrors = 0</p>
        <p class="CodeBlock">config_file = os.path.join(dirname, 'peak_loading_ipv4_vlan_traffic.ixncfg')</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">print "Printing connection variables ... "</p>
        <p class="CodeBlock">print "test_name = %s" % filename</p>
        <p class="CodeBlock">print 'chassis_ip =  %s' % chassis_ip</p>
        <p class="CodeBlock">print "tcl_server = %s " % tcl_server</p>
        <p class="CodeBlock">print "ixnetwork_tcl_server = %s" % ixnetwork_tcl_server</p>
        <p class="CodeBlock">print "port_list = %s " % port_list</p>
        <p class="CodeBlock">print "config_file = %s" % config_file</p>
        <p class="CodeBlock">###################################</p>
        <p class="CodeBlock">##  CONNECT WITH SESSION RESUME  ##</p>
        <p class="CodeBlock">###################################</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">print " Connecting to localhost ..."</p>
        <p class="CodeBlock" style="margin-left: 25px;">connect_result = ixiangpf.connect(</p>
        <p class="CodeBlock" style="margin-left: 25px;">port_list	         	=  port_list,</p>
        <p class="CodeBlock" style="margin-left: 25px;">device				 	=  chassis_ip,</p>
        <p class="CodeBlock" style="margin-left: 25px;">ixnetwork_tcl_server 	=  ixnetwork_tcl_server,</p>
        <p class="CodeBlock" style="margin-left: 25px;">tcl_server				=  tcl_server,</p>
        <p class="CodeBlock" style="margin-left: 25px;">config_file             =  config_file,</p>
        <p class="CodeBlock" style="margin-left: 25px;">break_locks             =  1,</p>
        <p class="CodeBlock">)</p>
        <p class="CodeBlock">if connect_result['status'] != '1':</p>
        <p class="CodeBlock" style="margin-left: 25px;">print "FAIL:"</p>
        <p class="CodeBlock" style="margin-left: 25px;">print connect_result['log']</p>
        <p class="CodeBlock" style="margin-left: 25px;">quit()</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">print " Printing connection result"</p>
        <p class="CodeBlock">pprint(connect_result)</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">ixNet = ixiangpf.ixnet</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">root = ixNet.getRoot()</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">aux = connect_result['traffic_config'].split('{')</p>
        <p class="CodeBlock">aux2 = aux[1].split('}')</p>
        <p class="CodeBlock">ti_name=aux2[0]</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">ti = connect_result[ti_name]['traffic_config']['traffic_item']</p>
        <p class="CodeBlock">print "Starting protocols ...\n"</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">start = ixiangpf.test_control( action = 'start_all_protocols')</p>
        <p class="CodeBlock">if start['status'] != '1':</p>
        <p class="CodeBlock" style="margin-left: 25px;">print "FAIL:"</p>
        <p class="CodeBlock" style="margin-left: 25px;">print start['log']</p>
        <p class="CodeBlock" style="margin-left: 25px;">quit()</p>
        <p class="CodeBlock">time.sleep(5)</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">traffic = ixiangpf.traffic_config(</p>
        <p class="CodeBlock" style="margin-left: 25px;">mode                            = 'modify',</p>
        <p class="CodeBlock" style="margin-left: 25px;">global_dest_mac_retry_count     = '3',</p>
        <p class="CodeBlock" style="margin-left: 25px;">global_dest_mac_retry_delay     = '3',</p>
        <p class="CodeBlock" style="margin-left: 25px;">global_enable_dest_mac_retry    = '1',</p>
        <p class="CodeBlock" style="margin-left: 25px;">global_enable_mac_change_on_fly = '1',</p>
        <p class="CodeBlock" style="margin-left: 25px;">global_frame_ordering           = 'peak_loading',</p>
        <p class="CodeBlock" style="margin-left: 25px;">stream_id                       = ti,</p>
        <p class="CodeBlock">)</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">if traffic['status'] != '1':</p>
        <p class="CodeBlock" style="margin-left: 25px;">print "FAIL:"</p>
        <p class="CodeBlock" style="margin-left: 25px;">print traffic['log']</p>
        <p class="CodeBlock" style="margin-left: 25px;">quit()</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">ordering_mode = ixNet.getAttribute('/traffic','-frameOrderingMode')</p>
        <p class="CodeBlock">&#160;</p>
        <p class="CodeBlock">print "Set ordering mode is : %s" % ordering_mode</p>
    </body>
</html>