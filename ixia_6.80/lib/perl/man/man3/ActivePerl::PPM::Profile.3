.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActivePerl::PPM::Profile 3"
.TH ActivePerl::PPM::Profile 3 "2008-12-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActivePerl::PPM::Profile \- Access to profile data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&  my $profile = ActivePerl::PPM::Profile\->new(<<EOT);
\&  <PPMPROFILE>
\&    <ACTIVEPERL VERSION="1004" PERL_VERSION="5.10.0" PPM_VERSION="4.04"/>
\&    <REPOSITORY NAME="ActiveState Package Repository"
\&       HREF="http://ppm4.activestate.com/darwin/5.10/1004/package.xml"/>
\&    <SOFTPKG NAME="Foo\-Bar" VERSION="1.0"/>
\&    <SOFTPKG NAME="HTML\-Parser" VERSION="3.65"/>
\&  </PPMPROFILE>
\&  EOT
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`ActivePerl::PPM::Profile\*(C'\fR object parse and provide access to
\&\s-1XML\s0 profile dumps as generated by the \fBppm profile save\fR command.
.PP
The following methods are provided:
.ie n .IP "$profile = ActivePerl::PPM::Profile\->new( $xml )" 4
.el .IP "\f(CW$profile\fR = ActivePerl::PPM::Profile\->new( \f(CW$xml\fR )" 4
.IX Item "$profile = ActivePerl::PPM::Profile->new( $xml )"
.PD 0
.ie n .IP "$profile = ActivePerl::PPM::Profile\->new( $filename )" 4
.el .IP "\f(CW$profile\fR = ActivePerl::PPM::Profile\->new( \f(CW$filename\fR )" 4
.IX Item "$profile = ActivePerl::PPM::Profile->new( $filename )"
.PD
This will parse the given \s-1XML\s0 document and create the object that
wraps the data.  The method croaks if it can't parse the document or
can't open the file.
.ie n .IP "$profile\->activeperl_version" 4
.el .IP "\f(CW$profile\fR\->activeperl_version" 4
.IX Item "$profile->activeperl_version"
This returns the build number of the ActivePerl used to create the
profile.  Example \*(L"825\*(R".
.ie n .IP "$profile\->perl_version" 4
.el .IP "\f(CW$profile\fR\->perl_version" 4
.IX Item "$profile->perl_version"
This returns the perl version number of the ActivePerl used to create
the profile.  Example \*(L"5.8.9\*(R".
.ie n .IP "$profile\->ppm_version" 4
.el .IP "\f(CW$profile\fR\->ppm_version" 4
.IX Item "$profile->ppm_version"
This return the version number of \s-1PPM\s0 that generated the profile.
Example \*(L"4.05\*(R".
.ie n .IP "$profile\->repositories" 4
.el .IP "\f(CW$profile\fR\->repositories" 4
.IX Item "$profile->repositories"
This returns the list of repositories configured.  Each entry is a
hash with the keys \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`href\*(C'\fR and \f(CW\*(C`enabled\*(C'\fR.  In scalar context
returns the number of repositories.
.ie n .IP "$profile\->packages" 4
.el .IP "\f(CW$profile\fR\->packages" 4
.IX Item "$profile->packages"
This returns the list of packages installed.  Each entry is a hash
with the keys \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`version\*(C'\fR.  In scalar context returns the
number of packages.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ppm
