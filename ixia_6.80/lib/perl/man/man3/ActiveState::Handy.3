.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Handy 3"
.TH ActiveState::Handy 3 "2010-08-05" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Handy \- Collection of small utility functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use ActiveState::Handy qw(add);
\& my $sum = add(1, 2, 3);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a collection of small utility functions.
.PP
The following functions are provided:
.ie n .IP "add( @numbers )" 4
.el .IP "add( \f(CW@numbers\fR )" 4
.IX Item "add( @numbers )"
Adds the given arguments together.
.ie n .IP "cat( $filename )" 4
.el .IP "cat( \f(CW$filename\fR )" 4
.IX Item "cat( $filename )"
Returns the content of a file.  Same as file_content( \f(CW$filename\fR ).
This function is still present for legacy reasons.
.ie n .IP "cat_text( $filename )" 4
.el .IP "cat_text( \f(CW$filename\fR )" 4
.IX Item "cat_text( $filename )"
Just like \fIcat()\fR but will read the file in text mode.  Makes a
difference on some platforms (like Windows).
.ie n .IP "ceil( $number )" 4
.el .IP "ceil( \f(CW$number\fR )" 4
.IX Item "ceil( $number )"
Rounds the number up to the nearest integer.  Same as \fIPOSIX::ceil()\fR.
.ie n .IP "cp_files( $from, $to, @files )" 4
.el .IP "cp_files( \f(CW$from\fR, \f(CW$to\fR, \f(CW@files\fR )" 4
.IX Item "cp_files( $from, $to, @files )"
Copies files from source to destination directory. Destination directory
will be created if it doesn't exist.  Function dies if any file cannot
be found.
.ie n .IP "cp_tree( $from, $to )" 4
.el .IP "cp_tree( \f(CW$from\fR, \f(CW$to\fR )" 4
.IX Item "cp_tree( $from, $to )"
Recursively copies all files and subdirectories from source to destination
directory. All destination directories will be created if they don't
already exist.
.ie n .IP "file_content( $filename )" 4
.el .IP "file_content( \f(CW$filename\fR )" 4
.IX Item "file_content( $filename )"
.PD 0
.ie n .IP "file_content( $filename, $content )" 4
.el .IP "file_content( \f(CW$filename\fR, \f(CW$content\fR )" 4
.IX Item "file_content( $filename, $content )"
.PD
Get or set the content of a file.  The file I/O takes place in binary
mode.
.Sp
If called with a single argument, then try to read the given file and
return \f(CW\*(C`undef\*(C'\fR if the file could not be opened.
.Sp
If called with two arguments, try to write the given \f(CW$content\fR to the
file denoted by the given \f(CW$filename\fR, creating the file itself or
missing directories as needed.  If the file can't be opened or created
this function will croak.  There is no return value when the file is
set.
.ie n .IP "iso_date( $time )" 4
.el .IP "iso_date( \f(CW$time\fR )" 4
.IX Item "iso_date( $time )"
.PD 0
.ie n .IP "iso_date( $y, $m, $d )" 4
.el .IP "iso_date( \f(CW$y\fR, \f(CW$m\fR, \f(CW$d\fR )" 4
.IX Item "iso_date( $y, $m, $d )"
.PD
Returns a \s-1ISO 8601\s0 formatted date; YYYY-MM-DD format.  See
\&\f(CW\*(C`http://www.cl.cam.ac.uk/~mgk25/iso\-time.html\*(C'\fR.
.ie n .IP "iso_datetime( $time )" 4
.el .IP "iso_datetime( \f(CW$time\fR )" 4
.IX Item "iso_datetime( $time )"
.PD 0
.ie n .IP "iso_datetime( $y, $m, $d, $h, $m, $s )" 4
.el .IP "iso_datetime( \f(CW$y\fR, \f(CW$m\fR, \f(CW$d\fR, \f(CW$h\fR, \f(CW$m\fR, \f(CW$s\fR )" 4
.IX Item "iso_datetime( $y, $m, $d, $h, $m, $s )"
.PD
Returns a \s-1ISO 8601\s0 formatted timestamp; YYYY\-MM\-DDThh:mm:ss format.  See
\&\f(CW\*(C`http://www.cl.cam.ac.uk/~mgk25/iso\-time.html\*(C'\fR.
.ie n .IP "xml_esc( $text )" 4
.el .IP "xml_esc( \f(CW$text\fR )" 4
.IX Item "xml_esc( $text )"
Will escape a piece of text so it can be embedded as text in an \s-1XML\s0
element.
.ie n .IP "xml_clean( $text )" 4
.el .IP "xml_clean( \f(CW$text\fR )" 4
.IX Item "xml_clean( $text )"
Will remove control characters so it can be embedded as text in an \s-1XML\s0
element. Does not perform escaping.
.ie n .IP "stringf( $format, %hash )" 4
.el .IP "stringf( \f(CW$format\fR, \f(CW%hash\fR )" 4
.IX Item "stringf( $format, %hash )"
printf-style template expansion compatible with the String::Format module.
.PP
For legacy reasons this module re-exports the functions \fIrun()\fR,
\&\fIshell_quote()\fR and \fIdecode_status()\fR from \f(CW\*(C`ActiveState::Run\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
none.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ActiveState::Run
