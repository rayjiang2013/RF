.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters 3"
.TH Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters 3 "2012-07-10" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters \- Use character classes for literal meta\-characters instead of escapes.
.SH "AFFILIATION"
.IX Header "AFFILIATION"
This Policy is part of the core Perl::Critic
distribution.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ever heard of leaning toothpick syndrome?  That comes from writing
regular expressions that match on characters that are significant in
regular expressions.  For example, the expression to match four
forward slashes looks like:
.PP
.Vb 1
\&    m/\e/\e/\e/\e//;
.Ve
.PP
Well, this policy doesn't solve that problem (write it as \f(CW\*(C`m{////}\*(C'\fR
instead!) but solves a related one.  As seen above, the escapes make
the expression hard to parse visually.  One solution is to use
character classes.  You see, inside of character classes, the only
characters that are special are \f(CW\*(C`\e\*(C'\fR, \f(CW\*(C`]\*(C'\fR, \f(CW\*(C`^\*(C'\fR and \f(CW\*(C`\-\*(C'\fR, so you
don't need to escape the others.  So instead of the following loose
IPv4 address matcher:
.PP
.Vb 1
\&    m/ \ed+ \e. \ed+ \e. \ed+ \e. \ed+ /x;
.Ve
.PP
You could write:
.PP
.Vb 1
\&    m/ \ed+ [.] \ed+ [.] \ed+ [.] \ed+ /x;
.Ve
.PP
which is certainly more readable, if less recognizable prior the
publication of Perl Best Practices.  (Of course, you should really use
Regexp::Common::net to match IPv4 addresses!)
.PP
Specifically, this policy forbids backslashes immediately prior to the
following characters:
.PP
.Vb 1
\&    { } ( ) . * + ? | #
.Ve
.PP
We make special exception for \f(CW\*(C`$\*(C'\fR because \f(CW\*(C`/[$]/\*(C'\fR turns into
\&\f(CW\*(C`/[5.008006/\*(C'\fR for Perl 5.8.6.  We also make an exception for \f(CW\*(C`^\*(C'\fR
because it has special meaning (negation) in a character class.
Finally, \f(CW\*(C`[\*(C'\fR and \f(CW\*(C`]\*(C'\fR are exempt, of course, because they are awkward
to represent in character classes.
.PP
Note that this policy does not forbid unnecessary escaping.  So go
ahead and (pointlessly) escape \f(CW\*(C`!\*(C'\fR characters.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This Policy is not configurable except for the standard options.
.SH "BUGS"
.IX Header "BUGS"
Perl treats \f(CW\*(C`m/[#]/x\*(C'\fR in unexpected ways.
I think it's a bug in Perl itself, but am not 100% sure that I have
not simply misunderstood...
.PP
This part makes sense:
.PP
.Vb 2
\&    "#f" =~ m/[#]f/x;     # match
\&    "#f" =~ m/[#]a/x;     # no match
.Ve
.PP
This doesn't:
.PP
.Vb 2
\&    $qr  = qr/f/;
\&    "#f" =~ m/[#]$qr/x; # no match
.Ve
.PP
Neither does this:
.PP
.Vb 2
\&    print qr/[#]$qr/x;  # yields \*(Aq(?x\-ism:[#]$qr
\&                                )\*(Aq
.Ve
.SH "CREDITS"
.IX Header "CREDITS"
Initial development of this policy was supported by a grant from the
Perl Foundation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Dolan <cdolan@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007\-2011 Chris Dolan.  Many rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module
