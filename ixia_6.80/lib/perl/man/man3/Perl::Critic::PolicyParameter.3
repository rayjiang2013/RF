.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::PolicyParameter 3"
.TH Perl::Critic::PolicyParameter 3 "2013-09-20" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::PolicyParameter \- Metadata about a parameter for a Policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A provider of validation and parsing of parameter values and metadata
about the parameter.
.SH "INTERFACE SUPPORT"
.IX Header "INTERFACE SUPPORT"
This is considered to be a public class.  Any changes to its interface
will go through a deprecation cycle.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """get_name()""" 4
.el .IP "\f(CWget_name()\fR" 4
.IX Item "get_name()"
Return the name of the parameter.  This is the key that will be looked
for in the \fI.perlcriticrc\fR.
.ie n .IP """get_description()""" 4
.el .IP "\f(CWget_description()\fR" 4
.IX Item "get_description()"
Return an explanation of the significance of the parameter, as
provided by the developer of the policy.
.ie n .IP """get_default_string()""" 4
.el .IP "\f(CWget_default_string()\fR" 4
.IX Item "get_default_string()"
Return a representation of the default value of this parameter as it
would appear if it was specified in a \fI.perlcriticrc\fR file.
.ie n .IP """parse_and_validate_config_value( $parser, $config )""" 4
.el .IP "\f(CWparse_and_validate_config_value( $parser, $config )\fR" 4
.IX Item "parse_and_validate_config_value( $parser, $config )"
Extract the configuration value for this parameter from the overall
configuration and initialize the policy based upon it.
.ie n .IP """generate_full_description()""" 4
.el .IP "\f(CWgenerate_full_description()\fR" 4
.IX Item "generate_full_description()"
Produce a more complete explanation of the significance of this
parameter than the value returned by \f(CW\*(C`get_description()\*(C'\fR.
.Sp
If no description can be derived, returns the empty string.
.Sp
Note that the result may contain multiple lines.
.ie n .IP """to_formatted_string( $format )""" 4
.el .IP "\f(CWto_formatted_string( $format )\fR" 4
.IX Item "to_formatted_string( $format )"
Generate a string representation of this parameter, based upon the
format.
.Sp
The format is a combination of literal and escape characters similar
to the way \f(CW\*(C`sprintf\*(C'\fR works.  If you want to know the specific
formatting capabilities, look at String::Format.
Valid escape characters are:
.RS 4
.ie n .IP "%n" 4
.el .IP "\f(CW%n\fR" 4
.IX Item "%n"
The name of the parameter.
.ie n .IP "%d" 4
.el .IP "\f(CW%d\fR" 4
.IX Item "%d"
The description, as supplied by the programmer.
.ie n .IP "%D" 4
.el .IP "\f(CW%D\fR" 4
.IX Item "%D"
The default value, in a parsable form.
.ie n .IP "%f" 4
.el .IP "\f(CW%f\fR" 4
.IX Item "%f"
The full description, which is an extension of the value returned by
\&\f(CW%d\fR.  Takes a parameter of a prefix for the beginning of each line.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"\s-1MAKING YOUR POLICY CONFIGURABLE\*(R"\s0 in Perl::Critic::DEVELOPER
.SH "AUTHOR"
.IX Header "AUTHOR"
Elliot Shank <perl@galumph.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006\-2011 Elliot Shank.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the \s-1LICENSE\s0 file included with this module.
