.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Tkx::TextSyntaxTags 3"
.TH ActiveState::Tkx::TextSyntaxTags 3 "2010-09-02" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Tkx::TextSyntaxTags \- perform syntax coloring of text wigets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use ActiveState::Tkx::TextSyntaxTags qw(update_syntax_tags);
\&  my $text = $mw\->new_text;
\&  $text\->insert("end", file_content($file));
\&  update_syntax_tags($text, lang => "perl");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`ActiveState::Tkx::TextSyntaxTags\*(C'\fR module provide a single function:
.ie n .IP "update_syntax_tags( $text_w, %options )" 4
.el .IP "update_syntax_tags( \f(CW$text_w\fR, \f(CW%options\fR )" 4
.IX Item "update_syntax_tags( $text_w, %options )"
This will assign tags to ranges of the text widget that correspond to
syntax elements.
.RS 4
.ie n .IP "file => $filename" 4
.el .IP "file => \f(CW$filename\fR" 4
.IX Item "file => $filename"
Tell \fIupdate_syntax_tags()\fR which file is displayed in the text widget.
If not provided all text in the widget is assumed to be code (unless
the 'range' option is provided).
.ie n .IP "lang => $lang" 4
.el .IP "lang => \f(CW$lang\fR" 4
.IX Item "lang => $lang"
The programming language displayed.  The \f(CW$lang\fR argument can be one of
\&'perl', 'python', 'ruby', 'vbscript', or 'xslt'.  The default is
\&'perl'.  Passed on to \f(CW\*(C`ActiveState::Scineplex\*(C'\fR.
.IP "linemap => \e%linemap" 4
.IX Item "linemap => %linemap"
.PD 0
.IP "linemap => \e&linemap" 4
.IX Item "linemap => &linemap"
.PD
The optional \f(CW\*(C`linemap\*(C'\fR argument can be used to specify where the
source lines from the file specified with the 'file' argument is
located in the text widget.  If not provided it is assumed that the
content of the text widget match the source text exactly; this is same
as \f(CW\*(C`linemap => sub { "$_[0].0" }\*(C'\fR.
.Sp
The \f(CW\*(C`linemap\*(C'\fR maps from a line number (1 based) to a position (index)
into the text widget of the standard \*(L"line.char\*(R" form.  If the linemap
return a false value then no syntax tagging is performed for the given
line.
.ie n .IP "range => [$first, $last]" 4
.el .IP "range => [$first, \f(CW$last\fR]" 4
.IX Item "range => [$first, $last]"
.PD 0
.ie n .IP "range => ""$first\-$last""" 4
.el .IP "range => ``$first\-$last''" 4
.IX Item "range => $first-$last"
.PD
Add syntax color to the given line range within the text widget.  The
line number range can either be passed as a 2 element array reference
or as a string with the line numbers separated by \*(L"\-\*(R".
.Sp
This option can't be combined with the 'file' and 'linemap' options.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ActiveState::Scineplex
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010 ActiveState Software Inc.  All rights reserved.
