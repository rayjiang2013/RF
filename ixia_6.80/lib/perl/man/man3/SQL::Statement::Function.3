.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Statement::Function 3"
.TH SQL::Statement::Function 3 "2012-12-19" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Statement::Function \- abstract base class for all function executing terms
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # this class doesn\*(Aqt have a common constructor, because all derived classes
\&  # have their special requirements
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function is an abstract base class providing the interface
for all function executing terms.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\&  SQL::Statement::Function
\&  ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1DESTROY\s0"
.IX Subsection "DESTROY"
Destroys the term and undefines the weak reference to the owner as well
as the reference to the parameter list.
.SH "NAME"
SQL::Statement::Function::UserFunc \- implements executing a perl subroutine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # create an user function term with an SQL::Statement object as owner,
\&  # specifying the function name, the subroutine name (full qualified)
\&  # and the parameters to the subroutine
\&  my $term = SQL::Statement::Function::UserFunc\->new( $owner, $name, $sub, \e@params );
\&  # access the result of that operation
\&  $term\->value( $eval );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function::UserFunc implements a term which returns the result
of the specified subroutine.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\&  SQL::Statement::Function
\&  ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Instantiates a new \f(CW\*(C`SQL::Statement::Function::UserFunc\*(C'\fR instance.
.SS "value"
.IX Subsection "value"
Invokes the given subroutine with the values of the params and return it's
result:
.PP
.Vb 2
\&    my @params = map { $_\->value($eval); } @{ $self\->{PARAMS} };
\&    return $subpkg\->$subname( $self\->{OWNER}, @params );
.Ve
.SH "NAME"
SQL::Statement::Function::NumericEval \- implements numeric evaluation of a term
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # create an user function term with an SQL::Statement object as owner,
\&  # specifying the expression to evaluate and the parameters to the subroutine
\&  my $term = SQL::Statement::NumericEval\->new( $owner, $expr, \e@params );
\&  # access the result of that operation
\&  $term\->value( $eval );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function::NumericEval implements the numeric evaluation of a
term. All parameters are expected to be numeric.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  SQL::Statement::Function::NumericEval
\&  ISA SQL::Statement::Function
\&    ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Instantiates a new \f(CW\*(C`SQL::Statement::Function::NumericEval\*(C'\fR instance.
Takes \fI\f(CI$owner\fI\fR, \fI\f(CI$expr\fI\fR and \fI\e@params\fR as arguments (in specified order).
.SS "value"
.IX Subsection "value"
Returns the result of the evaluated expression.
.SH "NAME"
SQL::Statement::Function::Trim \- implements the built\-in trim function support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # create an trim function term with an SQL::Statement object as owner,
\&  # specifying the spec, char and the parameters to the subroutine
\&  my $term = SQL::Statement::Trim\->new( $owner, $spec, $char, \e@params );
\&  # access the result of that operation
\&  $term\->value( $eval );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function::Trim implements string trimming.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  SQL::Statement::Function::Trim
\&  ISA SQL::Statement::Function
\&    ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Instantiates a new \f(CW\*(C`SQL::Statement::Function::Trim\*(C'\fR instance.
Takes \fI\f(CI$owner\fI\fR, \fI\f(CI$spec\fI\fR, \fI\f(CI$char\fI\fR and \fI\e@params\fR as arguments
(in specified order).
.PP
Meaning of the parameters:
.ie n .IP "\fI\fI$spec\fI\fR" 4
.el .IP "\fI\f(CI$spec\fI\fR" 4
.IX Item "$spec"
Can be on of '\s-1LEADING\s0', '\s-1TRAILING\s0' '\s-1BOTH\s0'. Trims the leading chars, trailing
chars or at both ends, respectively.
.Sp
Defaults to '\s-1BOTH\s0'.
.ie n .IP "\fI\fI$char\fI\fR" 4
.el .IP "\fI\f(CI$char\fI\fR" 4
.IX Item "$char"
The character to trim \- defaults to \f(CW\*(Aq \*(Aq\fR
.IP "\fI\e@params\fR" 4
.IX Item "@params"
Expected to be an array with exact 1 element (more aren't evaluated).
.SS "value"
.IX Subsection "value"
Returns the trimmed value of first parameter argument.
.SH "NAME"
SQL::Statement::Function::SubString \- implements the built\-in sub\-string function support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # create an substr function term with an SQL::Statement object as owner,
\&  # specifying the start and length of the sub string to extract from the
\&  # first element of \e@params
\&  my $term = SQL::Statement::SubString\->new( $owner, $start, $length, \e@params );
\&  # access the result of that operation
\&  $term\->value( $eval );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function::SubString implements a sub-string extraction term.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  SQL::Statement::Function::SubString
\&  ISA SQL::Statement::Function
\&    ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Instantiates a new \f(CW\*(C`SQL::Statement::Function::SubString\*(C'\fR instance.
Takes \fI\f(CI$owner\fI\fR, \fI\f(CI$start\fI\fR, \fI\f(CI$length\fI\fR and \fI\e@params\fR as arguments
(in specified order).
.PP
Meaning of the parameters:
.ie n .IP "\fI\fI$start\fI\fR" 4
.el .IP "\fI\f(CI$start\fI\fR" 4
.IX Item "$start"
Specifies the start position to extract the sub-string. This is expected
to be a SQL::Statement::Term instance. The first character in a string
has the position 1.
.ie n .IP "\fI\fI$length\fI\fR" 4
.el .IP "\fI\f(CI$length\fI\fR" 4
.IX Item "$length"
Specifies the length of the extracted sub-string. This is expected
to be a SQL::Statement::Term instance.
.Sp
If omitted, everything to the end of the string is returned.
.IP "\fI\e@params\fR" 4
.IX Item "@params"
Expected to be an array with exact 1 element (more aren't evaluated).
.SS "value"
.IX Subsection "value"
Returns the extracted sub-string value from first parameter argument.
.SH "NAME"
SQL::Statement::Function::StrConcat \- implements the built\-in string concatenation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # create an substr function term with an SQL::Statement object as owner
\&  # and \e@params to concatenate
\&  my $term = SQL::Statement::StrConcat\->new( $owner, \e@params );
\&  # access the result of that operation
\&  $term\->value( $eval );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Statement::Function::StrConcat implements a string concatenation term.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  SQL::Statement::Function::StrConcat
\&  ISA SQL::Statement::Function
\&    ISA SQL::Statement::Term
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Instantiates a new \f(CW\*(C`SQL::Statement::Function::StrConcat\*(C'\fR instance.
.SS "value"
.IX Subsection "value"
Returns the concatenated string composed of the parameter values.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 2009,2010 by Jens Rehsack: rehsackATcpan.org
.PP
All rights reserved.
.PP
You may distribute this module under the terms of either the \s-1GNU\s0
General Public License or the Artistic License, as specified in
the Perl \s-1README\s0 file.
