.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Element 3"
.TH PPIx::Regexp::Element 3 "2013-05-11" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Element \- Base of the PPIx::Regexp hierarchy.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
No user-serviceable parts inside.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Element\*(C'\fR is not descended from any other class.
.PP
\&\f(CW\*(C`PPIx::Regexp::Element\*(C'\fR is the parent of
PPIx::Regexp::Node and
PPIx::Regexp::Token.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is the base of the PPIx::Regexp
object hierarchy. It provides the same kind of navigational
functionality that is provided by PPI::Element.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.
.SS "ancestor_of"
.IX Subsection "ancestor_of"
This method returns true if the object is an ancestor of the argument,
and false otherwise. By the definition of this method, \f(CW$self\fR is its
own ancestor.
.SS "can_be_quantified"
.IX Subsection "can_be_quantified"
.Vb 2
\& $token\->can_be_quantified()
\&     and print "This element can be quantified.\en";
.Ve
.PP
This method returns true if the element can be quantified.
.SS "class"
.IX Subsection "class"
This method returns the class name of the element. It is the same as
\&\f(CW\*(C`ref $self\*(C'\fR.
.SS "comment"
.IX Subsection "comment"
This method returns true if the element is a comment and false
otherwise.
.SS "content"
.IX Subsection "content"
This method returns the content of the element.
.SS "descendant_of"
.IX Subsection "descendant_of"
This method returns true if the object is a descendant of the argument,
and false otherwise. By the definition of this method, \f(CW$self\fR is its
own descendant.
.SS "is_quantifier"
.IX Subsection "is_quantifier"
.Vb 2
\& $token\->is_quantifier()
\&     and print "This element is a quantifier.\en";
.Ve
.PP
This method returns true if the element is a quantifier. You can not
tell this from the element's class, because a right curly bracket may
represent a quantifier for the purposes of figuring out whether a
greediness token is possible.
.SS "next_sibling"
.IX Subsection "next_sibling"
This method returns the element's next sibling, or nothing if there is
none.
.SS "parent"
.IX Subsection "parent"
This method returns the parent of the element, or undef if there is
none.
.SS "perl_version_introduced"
.IX Subsection "perl_version_introduced"
This method returns the version of Perl in which the element was
introduced. This will be at least 5.000. Before 5.006 I am relying on
the \fIperldelta\fR, \fIperlre\fR, and \fIperlop\fR documentation, since I have
been unable to build earlier Perls. Since I have found no documentation
before 5.003, I assume that anything found in 5.003 is also in 5.000.
.PP
Since this all depends on my ability to read and understand masses of
documentation, the results of this method should be viewed with caution,
if not downright skepticism.
.PP
There are also cases which are ambiguous in various ways. For those see
\&\*(L"\s-1RESTRICTIONS\*(R"\s0 in PPIx::Regexp, and especially
\&\*(L"Changes in Syntax\*(R" in PPIx::Regexp.
.SS "perl_version_removed"
.IX Subsection "perl_version_removed"
This method returns the version of Perl in which the element was
removed. If the element is still valid the return is \f(CW\*(C`undef\*(C'\fR.
.PP
All the \fIcaveats\fR to
\&\fIperl_version_introduced()\fR apply here also,
though perhaps less severely since although many features have been
introduced since 5.0, few have been removed.
.SS "previous_sibling"
.IX Subsection "previous_sibling"
This method returns the element's previous sibling, or nothing if there
is none.
.SS "significant"
.IX Subsection "significant"
This method returns true if the element is significant and false
otherwise.
.SS "snext_sibling"
.IX Subsection "snext_sibling"
This method returns the element's next significant sibling, or nothing
if there is none.
.SS "sprevious_sibling"
.IX Subsection "sprevious_sibling"
This method returns the element's previous significant sibling, or
nothing if there is none.
.SS "tokens"
.IX Subsection "tokens"
This method returns all tokens contained in the element.
.SS "top"
.IX Subsection "top"
This method returns the top of the hierarchy.
.SS "unescaped_content"
.IX Subsection "unescaped_content"
This method returns the content of the element, unescaped.
.SS "whitespace"
.IX Subsection "whitespace"
This method returns true if the element is whitespace and false
otherwise.
.SS "nav"
.IX Subsection "nav"
This method returns navigation information from the top of the hierarchy
to this node. The return is a list of names of methods and references to
their argument lists. The idea is that given \f(CW$elem\fR which is somewhere
under \f(CW$top\fR,
.PP
.Vb 9
\& my @nav = $elem\->nav();
\& my $obj = $top;
\& while ( @nav ) {
\&     my $method = shift @nav;
\&     my $args = shift @nav;
\&     $obj = $obj\->$method( @{ $args } ) or die;
\& }
\& # At this point, $obj should contain the same object
\& # as $elem.
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2013 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
