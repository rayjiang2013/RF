.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActivePerl::DocTools::Pod 3"
.TH ActivePerl::DocTools::Pod 3 "2012-03-25" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActivePerl::DocTools::Pod \- Functions to process POD for ActivePerl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "pod2html( %args )" 4
.el .IP "pod2html( \f(CW%args\fR )" 4
.IX Item "pod2html( %args )"
Convert a \s-1POD\s0 document into an \s-1HTML\s0 document.  This is a wrapper for
the \fIpod2html()\fR function of \f(CW\*(C`Pod::Html\*(C'\fR that also modify the document
produced with various ActivePerl enhancements.
.Sp
The following arguments are recognized:
.RS 4
.ie n .IP "infile => $filename" 4
.el .IP "infile => \f(CW$filename\fR" 4
.IX Item "infile => $filename"
The name of the \s-1POD\s0 file you want to convert.  This argument is mandatory.
.ie n .IP "outfile => $filename" 4
.el .IP "outfile => \f(CW$filename\fR" 4
.IX Item "outfile => $filename"
The name of the \s-1HTML\s0 file you want as output.  This argument is mandatory.
.ie n .IP "depth => $int" 4
.el .IP "depth => \f(CW$int\fR" 4
.IX Item "depth => $int"
How many directory levels down from the root of the \s-1HTML\s0 tree will the
generated file eventually be installed.  The root of the \s-1HTML\s0 tree is
normally found at \f(CW$Config\fR{installhtmldir}, which is normally
\&\*(L"$Config{prefix}/html\*(R".
.Sp
The default is 0.
.ie n .IP "podroot => $dirname" 4
.el .IP "podroot => \f(CW$dirname\fR" 4
.IX Item "podroot => $dirname"
Specify the base directory for finding library pods.
The default is \f(CW$Config\fR{prefix}.
.ie n .IP "podpath => [$dir1, $dir2,...]" 4
.el .IP "podpath => [$dir1, \f(CW$dir2\fR,...]" 4
.IX Item "podpath => [$dir1, $dir2,...]"
What subdirectories of the \f(CW\*(C`podroot\*(C'\fR should be searched for \s-1POD\s0 files
in order to discover targets for links from the generated \s-1HTML\s0 file.
The specified directories must all exist.
.Sp
The links are generated with the assumption that the discovered \s-1POD\s0
files are converted into \s-1HTML\s0 files with and \fI.html\fR extension and
placed into an hierarchy (the \s-1HTML\s0 tree rooted at
\&\f(CW$Config\fR{installhtmldir}) using the same layout as the one found under
\&\f(CW\*(C`podroot\*(C'\fR.
.Sp
Instead of passing an array reference, the directories can
alternatively be specified as a single string of directory names
separated by \f(CW\*(C`:\*(C'\fR.
.Sp
The default is \f(CW\*(C`[qw(bin lib)]\*(C'\fR.
.ie n .IP "index => $bool" 4
.el .IP "index => \f(CW$bool\fR" 4
.IX Item "index => $bool"
Should a table on contents be created at the start of the \s-1HTML\s0
document.  By default no table of contents is generated.
.RE
.RS 4
.RE
.IP "pod2html_remove_cache_files( )" 4
.IX Item "pod2html_remove_cache_files( )"
The \fIpod2html()\fR will create cache files with names starting with
\&\fIpod2htm\fR in the current directory.  These cache files allow pod2html
to save link state between runs.  Call this function to clean up these
cache files.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Html
.SH "BUGS"
.IX Header "BUGS"
none.
